// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.student;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.6
 */
public class EvaluationPart extends SIFElement
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public EvaluationPart() {
		super( StudentDTD.EVALUATIONPART );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param name This is the name of a part that could receive a score.
	 *  @param score This is a subscore that is part of the evaluation.
	 *  @param scale This is the scale for the Subscore that is part of the evaluation.
	 */
	public EvaluationPart( NameEvaluation name, ScoreEvaluation score, ScaleEvaluation scale ) {
		super( StudentDTD.EVALUATIONPART );
		this.addName( name );
		this.setScore(score);
		this.setScale(scale);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		StringBuilder b = new StringBuilder();
		b.append( getFieldValue( StudentDTD.EVALUATIONPART_NAME ) );
		b.append('.');
		b.append( getFieldValue( StudentDTD.EVALUATIONPART_SCORE ) );
		b.append('.');
		b.append( getFieldValue( StudentDTD.EVALUATIONPART_SCALE ) );
		return b.toString();
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { StudentDTD.EVALUATIONPART_NAME, StudentDTD.EVALUATIONPART_SCORE, StudentDTD.EVALUATIONPART_SCALE };
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the name of a part that could receive a score."</i><p>
	 *
	 *  @param value A <code>NameEvaluation</code> object
	 *  @since 2.6
	 */
	public void addName( NameEvaluation value ) { 
		addChild( StudentDTD.EVALUATIONPART_NAME, value);
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> repeatable element.
	 *  This form of <code>setName</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setName</code>
	 *  that accepts a single <code>NameEvaluation</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;NameEvaluation&gt; element
	 *  @since 2.6
	 */
	public void addName( String value ) {
		addChild( StudentDTD.EVALUATIONPART_NAME, new NameEvaluation( value ) );
	}

	/**
	 *  Removes a <code>NameEvaluation</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the NameEvaluation object to remove by its Value value
	 *  @since 2.6
	 */
	public void removeName( String value ) { 
		removeChild( StudentDTD.EVALUATIONPART_NAME, new String[] { value.toString() } );
	}

	/**
	 *  Gets a <code>NameEvaluation</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the NameEvaluation object to return by its "Value" attribute value
	 *  @return A <code>NameEvaluation</code> object
	 *  @since 2.6
	 */
	public NameEvaluation getName( String value ) { 
		return (NameEvaluation)getChild( StudentDTD.EVALUATIONPART_NAME, new String[] { value.toString() } );
	}

	/**
	 *  Gets all <code>NameEvaluation</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>NameEvaluation</code> objects
	 *  @since 2.6
	 */
	public NameEvaluation[] getNames() {
		List<SIFElement> v = getChildList( StudentDTD.EVALUATIONPART_NAME);
		NameEvaluation[] cvt = new NameEvaluation[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>NameEvaluation</code> objects. All existing 
	 * <code>NameEvaluation</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>NameEvaluations</code>.
	 *
	 *  @since 2.6
	 */
	public void setNames( NameEvaluation[] names ) {
		setChildren( StudentDTD.EVALUATIONPART_NAME, names );
	}

	/**
	 *  Sets the value of the <code>&lt;Score&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is a subscore that is part of the evaluation."</i><p>
	 *
	 *  @param value A <code>ScoreEvaluation</code> object
	 *  @since 2.6
	 */
	public void setScore( ScoreEvaluation value ) { 
		removeChild( StudentDTD.EVALUATIONPART_SCORE );
		addChild( StudentDTD.EVALUATIONPART_SCORE, value);
	}

	/**
	 *  Sets the value of the <code>&lt;Score&gt;</code> child element.
	 *  This form of <code>setScore</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setScore</code>
	 *  that accepts a single <code>ScoreEvaluation</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;ScoreEvaluation&gt; element
	 *  @since 2.6
	 */
	public void setScore( String value ) {
		removeChild( StudentDTD.EVALUATIONPART_SCORE);
		addChild( StudentDTD.EVALUATIONPART_SCORE, new ScoreEvaluation( value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;Score&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is a subscore that is part of the evaluation."</i><p>
	 *
	 *  @return A <code>ScoreEvaluation</code> object
	 *  @since 2.6
	 */
	public ScoreEvaluation getScore() { 
		return (ScoreEvaluation)getChild( StudentDTD.EVALUATIONPART_SCORE);
	}

	/**
	 *  Removes the <code>Score</code> child element previously created by calling <code>setScore</code>
	 *
	 *  @since 2.6
	 */
	public void removeScore() { 
		removeChild( StudentDTD.EVALUATIONPART_SCORE );
	}

	/**
	 *  Sets the value of the <code>&lt;Scale&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the scale for the Subscore that is part of the evaluation."</i><p>
	 *
	 *  @param value A <code>ScaleEvaluation</code> object
	 *  @since 2.6
	 */
	public void setScale( ScaleEvaluation value ) { 
		removeChild( StudentDTD.EVALUATIONPART_SCALE );
		addChild( StudentDTD.EVALUATIONPART_SCALE, value);
	}

	/**
	 *  Sets the value of the <code>&lt;Scale&gt;</code> child element.
	 *  This form of <code>setScale</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setScale</code>
	 *  that accepts a single <code>ScaleEvaluation</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;ScaleEvaluation&gt; element
	 *  @since 2.6
	 */
	public void setScale( String value ) {
		removeChild( StudentDTD.EVALUATIONPART_SCALE);
		addChild( StudentDTD.EVALUATIONPART_SCALE, new ScaleEvaluation( value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;Scale&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the scale for the Subscore that is part of the evaluation."</i><p>
	 *
	 *  @return A <code>ScaleEvaluation</code> object
	 *  @since 2.6
	 */
	public ScaleEvaluation getScale() { 
		return (ScaleEvaluation)getChild( StudentDTD.EVALUATIONPART_SCALE);
	}

	/**
	 *  Removes the <code>Scale</code> child element previously created by calling <code>setScale</code>
	 *
	 *  @since 2.6
	 */
	public void removeScale() { 
		removeChild( StudentDTD.EVALUATIONPART_SCALE );
	}

}
