// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.student;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class Offender extends SIFKeyedElement
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public Offender() {
		super( StudentDTD.OFFENDER );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param type Identifies the type of offender involved in the incident.
	 *  @param injury Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor.
	 */
	public Offender( ReporterDescriptionType type, InjuryType injury ) {
		super( StudentDTD.OFFENDER );
		this.setType( type );
		this.setInjury( injury );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( StudentDTD.OFFENDER_TYPE );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { StudentDTD.OFFENDER_TYPE };
	}

	/**
	 *  Gets the value of the <code>Type</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Identifies the type of offender involved in the incident."</i><p>
	 *
	 *  @return The <code>Type</code> attribute of this object.
	 *  @since 2.0
	 */
	public String getType() { 
		return getFieldValue( StudentDTD.OFFENDER_TYPE );
	}

	/**
	 *  Sets the value of the <code>Type</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Identifies the type of offender involved in the incident."</i><p>
	 *
	 *  @param value A constant defined by the <code>ReporterDescriptionType</code> class
	 *  @since 2.0
	 */
	public void setType( ReporterDescriptionType value ) { 
		setField( StudentDTD.OFFENDER_TYPE, value );
	}

	/**
	 *  Sets the value of the <code>Type</code> attribute as a String.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Identifies the type of offender involved in the incident."</i><p>
	 *
	 *  @param value The value as a String
	 *  @since 2.0
	 */
	public void setType( String value ) { 
		setField( StudentDTD.OFFENDER_TYPE, value );
	}

	/**
	 *  Sets the value of the <code>&lt;Name&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The name of the offender."</i><p>
	 *
	 *  @param value A <code>Name</code> object
	 *  @since 2.0
	 */
	public void setName( Name value ) { 
		removeChild( StudentDTD.OFFENDER_NAME );
		addChild( StudentDTD.OFFENDER_NAME, value);
	}

	/**
	 *  Sets the value of the <code>&lt;Name&gt;</code> child element.
	 *  This form of <code>setName</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setName</code>
	 *  that accepts a single <code>Name</code> object.
	 *
	 *  @param type Code that specifies what type of name this is.  If unsure, use 04.
	 *  @param lastName The last name.
	 *  @param firstName The first name.
	 *  @since 2.0
	 */
	public void setName( NameType type, String lastName, String firstName ) {
		removeChild( StudentDTD.OFFENDER_NAME);
		addChild( StudentDTD.OFFENDER_NAME, new Name( type, lastName, firstName ) );
	}

	/**
	 *  Gets the value of the <code>&lt;Name&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The name of the offender."</i><p>
	 *
	 *  @return A <code>Name</code> object
	 *  @since 2.0
	 */
	public Name getName() { 
		return (Name)getChild( StudentDTD.OFFENDER_NAME);
	}

	/**
	 *  Removes the <code>Name</code> child element previously created by calling <code>setName</code>
	 *
	 *  @since 2.0
	 */
	public void removeName() { 
		removeChild( StudentDTD.OFFENDER_NAME );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_RefId&gt;</code> element.
	 *
	 *  @param value A <code>SIF_RefId</code> object
	 *  @since 2.0
	 */
	public void setSIF_RefId( SIF_RefId value ) { 
		removeChild( StudentDTD.OFFENDER_SIF_REFID );
		addChild( StudentDTD.OFFENDER_SIF_REFID, value);
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_RefId&gt;</code> child element.
	 *  This form of <code>setSIF_RefId</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setSIF_RefId</code>
	 *  that accepts a single <code>SIF_RefId</code> object.
	 *
	 *  @param sifRefObject 
	 *  @param value Gets or sets the content value of the &lt;SIF_RefId&gt; element
	 *  @since 2.0
	 */
	public void setSIF_RefId( String sifRefObject, String value ) {
		removeChild( StudentDTD.OFFENDER_SIF_REFID);
		addChild( StudentDTD.OFFENDER_SIF_REFID, new SIF_RefId( sifRefObject, value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_RefId&gt;</code> element.
	 *
	 *  @return A <code>SIF_RefId</code> object
	 *  @since 2.0
	 */
	public SIF_RefId getSIF_RefId() { 
		return (SIF_RefId)getChild( StudentDTD.OFFENDER_SIF_REFID);
	}

	/**
	 *  Removes the <code>SIF_RefId</code> child element previously created by calling <code>setSIF_RefId</code>
	 *
	 *  @since 2.0
	 */
	public void removeSIF_RefId() { 
		removeChild( StudentDTD.OFFENDER_SIF_REFID );
	}

	/**
	 *  Gets the value of the <code>&lt;Injury&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor."</i><p>
	 *
	 *  @return The <code>Injury</code> element of this object.
	 *  @since 2.0
	 */
	public String getInjury() { 
		return getFieldValue( StudentDTD.OFFENDER_INJURY );
	}

	/**
	 *  Sets the value of the <code>&lt;Injury&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor."</i><p>
	 *
	 *  @param value A constant defined by the <code>InjuryType</code> class
	 *  @since 2.0
	 */
	public void setInjury( InjuryType value ) { 
		setField( StudentDTD.OFFENDER_INJURY, value );
	}

	/**
	 *  Sets the value of the <code>&lt;Injury&gt;</code> element as a String.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor."</i><p>
	 *
	 *  @param value The value as a String
	 *  @since 2.0
	 */
	public void setInjury( String value ) { 
		setField( StudentDTD.OFFENDER_INJURY, value );
	}

	/**
	 *  Sets the value of the <code>&lt;ManifestationDetermination&gt;</code> element.
	 *
	 *  @param value A <code>ManifestationDetermination</code> object
	 *  @since 2.0
	 */
	public void setManifestationDetermination( ManifestationDetermination value ) { 
		removeChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION );
		addChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION, value);
	}

	/**
	 *  Gets the value of the <code>&lt;ManifestationDetermination&gt;</code> element.
	 *
	 *  @return A <code>ManifestationDetermination</code> object
	 *  @since 2.0
	 */
	public ManifestationDetermination getManifestationDetermination() { 
		return (ManifestationDetermination)getChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION);
	}

	/**
	 *  Removes the <code>ManifestationDetermination</code> child element previously created by calling <code>setManifestationDetermination</code>
	 *
	 *  @since 2.0
	 */
	public void removeManifestationDetermination() { 
		removeChild( StudentDTD.OFFENDER_MANIFESTATIONDETERMINATION );
	}

	/**
	 *  Sets the value of the <code>&lt;ActionList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"List of actions taken.
    	Note: There is also a SIF type called ActionList. It is one of two types of lists. Do not confuse this element with the SIF type called ActionList. This problem will be resolved in the next major release."</i><p>
	 *
	 *  @param value A <code>ActionList</code> object
	 *  @since 2.0
	 */
	public void setActionList( ActionList value ) { 
		removeChild( StudentDTD.OFFENDER_ACTIONLIST );
		addChild( StudentDTD.OFFENDER_ACTIONLIST, value);
	}

	/**
	 *  Gets the value of the <code>&lt;ActionList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"List of actions taken.
    	Note: There is also a SIF type called ActionList. It is one of two types of lists. Do not confuse this element with the SIF type called ActionList. This problem will be resolved in the next major release."</i><p>
	 *
	 *  @return An <code>ActionList</code> object
	 *  @since 2.0
	 */
	public ActionList getActionList() { 
		return (ActionList)getChild( StudentDTD.OFFENDER_ACTIONLIST);
	}

	/**
	 *  Removes the <code>ActionList</code> child element previously created by calling <code>setActionList</code>
	 *
	 *  @since 2.0
	 */
	public void removeActionList() { 
		removeChild( StudentDTD.OFFENDER_ACTIONLIST );
	}

	/**
	 *  Sets the value of the <code>&lt;WeaponTypeList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"List of weapons involved in the incident used by the offender. If the incident involves weapons, the element must have a value.
				Each weapon used by the offender is identified by a WeaponType entry. When multiple weapons of a single type are used by the offender, each weapon has a separate entry in this list.
				(Note: All weapons used in the incident are reported in WeaponTypeList entries for the incident, including those weapons related to this offender.)"</i><p>
	 *
	 *  @param value A <code>WeaponTypeList</code> object
	 *  @since 2.4
	 */
	public void setWeaponTypeList( WeaponTypeList value ) { 
		removeChild( StudentDTD.OFFENDER_WEAPONTYPELIST );
		addChild( StudentDTD.OFFENDER_WEAPONTYPELIST, value);
	}

	/**
	 *  Gets the value of the <code>&lt;WeaponTypeList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"List of weapons involved in the incident used by the offender. If the incident involves weapons, the element must have a value.
				Each weapon used by the offender is identified by a WeaponType entry. When multiple weapons of a single type are used by the offender, each weapon has a separate entry in this list.
				(Note: All weapons used in the incident are reported in WeaponTypeList entries for the incident, including those weapons related to this offender.)"</i><p>
	 *
	 *  @return A <code>WeaponTypeList</code> object
	 *  @since 2.4
	 */
	public WeaponTypeList getWeaponTypeList() { 
		return (WeaponTypeList)getChild( StudentDTD.OFFENDER_WEAPONTYPELIST);
	}

	/**
	 *  Removes the <code>WeaponTypeList</code> child element previously created by calling <code>setWeaponTypeList</code>
	 *
	 *  @since 2.4
	 */
	public void removeWeaponTypeList() { 
		removeChild( StudentDTD.OFFENDER_WEAPONTYPELIST );
	}

	/**
	 *  Sets the value of the <code>&lt;RelatedToList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"List of categories to which the offender’s incident is related."</i><p>
	 *
	 *  @param value A <code>RelatedToList</code> object
	 *  @since 2.4
	 */
	public void setRelatedToList( RelatedToList value ) { 
		removeChild( StudentDTD.OFFENDER_RELATEDTOLIST );
		addChild( StudentDTD.OFFENDER_RELATEDTOLIST, value);
	}

	/**
	 *  Gets the value of the <code>&lt;RelatedToList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"List of categories to which the offender’s incident is related."</i><p>
	 *
	 *  @return A <code>RelatedToList</code> object
	 *  @since 2.4
	 */
	public RelatedToList getRelatedToList() { 
		return (RelatedToList)getChild( StudentDTD.OFFENDER_RELATEDTOLIST);
	}

	/**
	 *  Removes the <code>RelatedToList</code> child element previously created by calling <code>setRelatedToList</code>
	 *
	 *  @since 2.4
	 */
	public void removeRelatedToList() { 
		removeChild( StudentDTD.OFFENDER_RELATEDTOLIST );
	}

}
