// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.student;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  A student address<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.1
 */
public class StudentAddressList extends SIFActionList<Address>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public StudentAddressList() {
		super( StudentDTD.STUDENTADDRESSLIST );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param pickupOrDropoff Specifies if this is a pickup or dropoff address
	 *  @param dayOfWeek The days of the week for which the pickup or dropoff address is valid
	 *  @param address The street address
	 */
	public StudentAddressList( PickupOrDropoff pickupOrDropoff, String dayOfWeek, Address address ) {
		super( StudentDTD.STUDENTADDRESSLIST );
		this.setPickupOrDropoff( pickupOrDropoff );
		this.setDayOfWeek(dayOfWeek);
		this.safeAddChild( StudentDTD.STUDENTADDRESSLIST_ADDRESS, address );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( StudentDTD.STUDENTADDRESSLIST_ADDRESS );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { StudentDTD.STUDENTADDRESSLIST_ADDRESS };
	}

	/**
	 *  Gets the value of the <code>PickupOrDropoff</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Specifies if this is a pickup or dropoff address"</i><p>
	 *
	 *  @return The <code>PickupOrDropoff</code> attribute of this object.
	 *  @since 1.1
	 */
	public String getPickupOrDropoff() { 
		return getFieldValue( StudentDTD.STUDENTADDRESSLIST_PICKUPORDROPOFF );
	}

	/**
	 *  Sets the value of the <code>PickupOrDropoff</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Specifies if this is a pickup or dropoff address"</i><p>
	 *
	 *  @param value A constant defined by the <code>PickupOrDropoff</code> class
	 *  @since 1.1
	 */
	public void setPickupOrDropoff( PickupOrDropoff value ) { 
		setField( StudentDTD.STUDENTADDRESSLIST_PICKUPORDROPOFF, value );
	}

	/**
	 *  Sets the value of the <code>PickupOrDropoff</code> attribute as a String.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Specifies if this is a pickup or dropoff address"</i><p>
	 *
	 *  @param value The value as a String
	 *  @since 1.1
	 */
	public void setPickupOrDropoff( String value ) { 
		setField( StudentDTD.STUDENTADDRESSLIST_PICKUPORDROPOFF, value );
	}

	/**
	 *  Gets the value of the <code>DayOfWeek</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The days of the week for which the pickup or dropoff address is valid"</i><p>
	 *
	 *  @return The <code>DayOfWeek</code> attribute of this object.
	 *  @since 1.1
	 */
	public String getDayOfWeek() { 
		return (String) getSIFSimpleFieldValue( StudentDTD.STUDENTADDRESSLIST_DAYOFWEEK );
	}

	/**
	 *  Sets the value of the <code>DayOfWeek</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The days of the week for which the pickup or dropoff address is valid"</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.1
	 */
	public void setDayOfWeek( String value ) { 
		setFieldValue( StudentDTD.STUDENTADDRESSLIST_DAYOFWEEK, new SIFString( value ), value );
	}

	/**
	 *  Adds a new <code>&lt;Address&gt;</code> repeatable element.
	 *  This form of <code>setAddress</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setAddress</code>
	 *  that accepts a single <code>Address</code> object.
	 *
	 *  @param type Code that defines the location of the address.  Note:  A subset of specific valid values for each instance in a data object may be listed in that object.
	 *  @param street The street part of the address
	 *  @param city The city part of the address.
	 *  @param stateProvince The state or province code.
	 *  @param country The country code.
	 *  @param postalCode The ZIP/postal code.
	 *  @since 1.1
	 */
	public void addAddress( AddressType type, Street street, String city, StatePrCode stateProvince, CountryCode country, String postalCode ) {
		addChild( StudentDTD.STUDENTADDRESSLIST_ADDRESS, new Address( type, street, city, stateProvince, country, postalCode ) );
	}

	/**
	 *  Removes an <code>Address</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Address object to remove by its Type value
	 *  @since 1.1
	 */
	public void removeAddress( AddressType type ) { 
		removeChild( StudentDTD.STUDENTADDRESSLIST_ADDRESS, new String[] { type.toString() } );
	}

	/**
	 *  Gets an <code>Address</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Address object to return by its "Type" attribute value
	 *  @return An <code>Address</code> object
	 *  @since 1.1
	 */
	public Address getAddress( AddressType type ) { 
		return (Address)getChild( StudentDTD.STUDENTADDRESSLIST_ADDRESS, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Address</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Address</code> objects
	 *  @since 1.1
	 */
	public Address[] getAddresses() {
		List<SIFElement> v = getChildList( StudentDTD.STUDENTADDRESSLIST_ADDRESS);
		Address[] cvt = new Address[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Address</code> objects. All existing 
	 * <code>Address</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Addresses</code>.
	 *
	 *  @since 1.1
	 */
	public void setAddresses( Address[] addresses ) {
		setChildren( StudentDTD.STUDENTADDRESSLIST_ADDRESS, addresses );
	}

}
