// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.student;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.6
 */
public class EvaluationParts extends SIFList<EvaluationPart>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public EvaluationParts() {
		super( StudentDTD.EVALUATIONPARTS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param evaluationPart Container for parts of the evaluation
	 */
	public EvaluationParts( EvaluationPart evaluationPart ) {
		super( StudentDTD.EVALUATIONPARTS );
		this.safeAddChild( StudentDTD.EVALUATIONPARTS_EVALUATIONPART, evaluationPart );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( StudentDTD.EVALUATIONPARTS_EVALUATIONPART );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { StudentDTD.EVALUATIONPARTS_EVALUATIONPART };
	}

	/**
	 *  Adds a new <code>&lt;EvaluationPart&gt;</code> repeatable element.
	 *  This form of <code>setEvaluationPart</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setEvaluationPart</code>
	 *  that accepts a single <code>EvaluationPart</code> object.
	 *
	 *  @param name This is the name of a part that could receive a score.
	 *  @param score This is a subscore that is part of the evaluation.
	 *  @param scale This is the scale for the Subscore that is part of the evaluation.
	 *  @since 2.6
	 */
	public void addEvaluationPart( NameEvaluation name, ScoreEvaluation score, ScaleEvaluation scale ) {
		addChild( StudentDTD.EVALUATIONPARTS_EVALUATIONPART, new EvaluationPart( name, score, scale ) );
	}

	/**
	 *  Removes an <code>EvaluationPart</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param name Identifies the EvaluationPart object to remove by its Name value
	 *  @param score Identifies the EvaluationPart object to remove by its Score value
	 *  @param scale Identifies the EvaluationPart object to remove by its Scale value
	 *  @since 2.6
	 */
	public void removeEvaluationPart( NameEvaluation name, ScoreEvaluation score, ScaleEvaluation scale ) { 
		removeChild( StudentDTD.EVALUATIONPARTS_EVALUATIONPART, new String[] { name.toString(),score.toString(),scale.toString() } );
	}

	/**
	 *  Gets an <code>EvaluationPart</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param name Identifies the EvaluationPart object to return by its "Name" attribute value
	 *  @param score Identifies the EvaluationPart object to return by its "Score" attribute value
	 *  @param scale Identifies the EvaluationPart object to return by its "Scale" attribute value
	 *  @return An <code>EvaluationPart</code> object
	 *  @since 2.6
	 */
	public EvaluationPart getEvaluationPart( NameEvaluation name, ScoreEvaluation score, ScaleEvaluation scale ) { 
		return (EvaluationPart)getChild( StudentDTD.EVALUATIONPARTS_EVALUATIONPART, new String[] { name.toString(),score.toString(),scale.toString() } );
	}

	/**
	 *  Gets all <code>EvaluationPart</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>EvaluationPart</code> objects
	 *  @since 2.6
	 */
	public EvaluationPart[] getEvaluationParts() {
		List<SIFElement> v = getChildList( StudentDTD.EVALUATIONPARTS_EVALUATIONPART);
		EvaluationPart[] cvt = new EvaluationPart[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>EvaluationPart</code> objects. All existing 
	 * <code>EvaluationPart</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>EvaluationParts</code>.
	 *
	 *  @since 2.6
	 */
	public void setEvaluationParts( EvaluationPart[] evaluationparts ) {
		setChildren( StudentDTD.EVALUATIONPARTS_EVALUATIONPART, evaluationparts );
	}

}
