// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.student;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class OffenderList extends SIFKeyedList<Offender>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public OffenderList() {
		super( StudentDTD.OFFENDERLIST );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param offender 
	 */
	public OffenderList( Offender offender ) {
		super( StudentDTD.OFFENDERLIST );
		this.safeAddChild( StudentDTD.OFFENDERLIST_OFFENDER, offender );
	}

	/**
	 *  Adds a new <code>&lt;Offender&gt;</code> repeatable element.
	 *  This form of <code>setOffender</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setOffender</code>
	 *  that accepts a single <code>Offender</code> object.
	 *
	 *  @param type Identifies the type of offender involved in the incident.
	 *  @param injury Identifies whether or not this specific offender was physically injured, and if so, identifies whether the injury was major or minor.
	 *  @since 2.0
	 */
	public void addOffender( ReporterDescriptionType type, InjuryType injury ) {
		addChild( StudentDTD.OFFENDERLIST_OFFENDER, new Offender( type, injury ) );
	}

	/**
	 *  Removes an <code>Offender</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Offender object to remove by its Type value
	 *  @since 2.0
	 */
	public void removeOffender( ReporterDescriptionType type ) { 
		removeChild( StudentDTD.OFFENDERLIST_OFFENDER, new String[] { type.toString() } );
	}

	/**
	 *  Gets an <code>Offender</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Offender object to return by its "Type" attribute value
	 *  @return An <code>Offender</code> object
	 *  @since 2.0
	 */
	public Offender getOffender( ReporterDescriptionType type ) { 
		return (Offender)getChild( StudentDTD.OFFENDERLIST_OFFENDER, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Offender</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Offender</code> objects
	 *  @since 2.0
	 */
	public Offender[] getOffenders() {
		List<SIFElement> v = getChildList( StudentDTD.OFFENDERLIST_OFFENDER);
		Offender[] cvt = new Offender[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Offender</code> objects. All existing 
	 * <code>Offender</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Offenders</code>.
	 *
	 *  @since 2.0
	 */
	public void setOffenders( Offender[] offenders ) {
		setChildren( StudentDTD.OFFENDERLIST_OFFENDER, offenders );
	}

}
