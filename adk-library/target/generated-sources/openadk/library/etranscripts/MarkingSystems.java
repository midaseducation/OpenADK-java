// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.etranscripts;

import openadk.library.*;
import openadk.library.common.*;
import openadk.library.gradebook.*;
import openadk.library.student.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class MarkingSystems extends SIFKeyedList<MarkValueInfoData>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public MarkingSystems() {
		super( EtranscriptsDTD.MARKINGSYSTEMS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param markValueInfoData 
	 */
	public MarkingSystems( MarkValueInfoData markValueInfoData ) {
		super( EtranscriptsDTD.MARKINGSYSTEMS );
		this.safeAddChild( EtranscriptsDTD.MARKINGSYSTEMS_MARKVALUEINFODATA, markValueInfoData );
	}

	/**
	 *  Adds a new <code>&lt;MarkValueInfoData&gt;</code> repeatable element.
	 *  This form of <code>setMarkValueInfoData</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setMarkValueInfoData</code>
	 *  that accepts a single <code>MarkValueInfoData</code> object.
	 *
	 *  @param refId ID used internally to StudentAcademicRecord to link marks to their marking systems.
	 *  @since 2.0
	 */
	public void addMarkValueInfoData( String refId ) {
		addChild( EtranscriptsDTD.MARKINGSYSTEMS_MARKVALUEINFODATA, new MarkValueInfoData( refId ) );
	}

	/**
	 *  Removes a <code>MarkValueInfoData</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param refId Identifies the MarkValueInfoData object to remove by its RefId value
	 *  @since 2.0
	 */
	public void removeMarkValueInfoData( String refId ) { 
		removeChild( EtranscriptsDTD.MARKINGSYSTEMS_MARKVALUEINFODATA, new String[] { refId.toString() } );
	}

	/**
	 *  Gets a <code>MarkValueInfoData</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param refId Identifies the MarkValueInfoData object to return by its "RefId" attribute value
	 *  @return A <code>MarkValueInfoData</code> object
	 *  @since 2.0
	 */
	public MarkValueInfoData getMarkValueInfoData( String refId ) { 
		return (MarkValueInfoData)getChild( EtranscriptsDTD.MARKINGSYSTEMS_MARKVALUEINFODATA, new String[] { refId.toString() } );
	}

	/**
	 *  Gets all <code>MarkValueInfoData</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>MarkValueInfoData</code> objects
	 *  @since 2.0
	 */
	public MarkValueInfoData[] getMarkValueInfoDatas() {
		List<SIFElement> v = getChildList( EtranscriptsDTD.MARKINGSYSTEMS_MARKVALUEINFODATA);
		MarkValueInfoData[] cvt = new MarkValueInfoData[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>MarkValueInfoData</code> objects. All existing 
	 * <code>MarkValueInfoData</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>MarkValueInfoDatas</code>.
	 *
	 *  @since 2.0
	 */
	public void setMarkValueInfoDatas( MarkValueInfoData[] markvalueinfodatas ) {
		setChildren( EtranscriptsDTD.MARKINGSYSTEMS_MARKVALUEINFODATA, markvalueinfodatas );
	}

}
