// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.instr;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class Prerequisites extends SIFKeyedList<Prerequisite>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public Prerequisites() {
		super( InstrDTD.PREREQUISITES );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param prerequisite Skill or competency the student must have to engage in activity.
	 */
	public Prerequisites( Prerequisite prerequisite ) {
		super( InstrDTD.PREREQUISITES );
		this.safeAddChild( InstrDTD.PREREQUISITES_PREREQUISITE, prerequisite );
	}

	/**
	 *  Adds a new <code>&lt;Prerequisite&gt;</code> repeatable element.
	 *  This form of <code>setPrerequisite</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setPrerequisite</code>
	 *  that accepts a single <code>Prerequisite</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;Prerequisite&gt; element
	 *  @since 1.5r1
	 */
	public void addPrerequisite( String value ) {
		addChild( InstrDTD.PREREQUISITES_PREREQUISITE, new Prerequisite( value ) );
	}

	/**
	 *  Removes a <code>Prerequisite</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the Prerequisite object to remove by its Value value
	 *  @since 1.5r1
	 */
	public void removePrerequisite( String value ) { 
		removeChild( InstrDTD.PREREQUISITES_PREREQUISITE, new String[] { value.toString() } );
	}

	/**
	 *  Gets a <code>Prerequisite</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the Prerequisite object to return by its "Value" attribute value
	 *  @return A <code>Prerequisite</code> object
	 *  @since 1.5r1
	 */
	public Prerequisite getPrerequisite( String value ) { 
		return (Prerequisite)getChild( InstrDTD.PREREQUISITES_PREREQUISITE, new String[] { value.toString() } );
	}

	/**
	 *  Gets all <code>Prerequisite</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Prerequisite</code> objects
	 *  @since 1.5r1
	 */
	public Prerequisite[] getPrerequisites() {
		List<SIFElement> v = getChildList( InstrDTD.PREREQUISITES_PREREQUISITE);
		Prerequisite[] cvt = new Prerequisite[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Prerequisite</code> objects. All existing 
	 * <code>Prerequisite</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Prerequisites</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setPrerequisites( Prerequisite[] prerequisites ) {
		setChildren( InstrDTD.PREREQUISITES_PREREQUISITE, prerequisites );
	}

}
