// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.instr;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class StatementCodes extends SIFKeyedList<StatementCode>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public StatementCodes() {
		super( InstrDTD.STATEMENTCODES );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param statementCode An alphanumeric ID code as defined by the organization to identify the statement.
	 */
	public StatementCodes( StatementCode statementCode ) {
		super( InstrDTD.STATEMENTCODES );
		this.safeAddChild( InstrDTD.STATEMENTCODES_STATEMENTCODE, statementCode );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( InstrDTD.STATEMENTCODES_STATEMENTCODE );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { InstrDTD.STATEMENTCODES_STATEMENTCODE };
	}

	/**
	 *  Adds a new <code>&lt;StatementCode&gt;</code> repeatable element.
	 *  This form of <code>setStatementCode</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setStatementCode</code>
	 *  that accepts a single <code>StatementCode</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;StatementCode&gt; element
	 *  @since 1.5r1
	 */
	public void addStatementCode( String value ) {
		addChild( InstrDTD.STATEMENTCODES_STATEMENTCODE, new StatementCode( value ) );
	}

	/**
	 *  Removes a <code>StatementCode</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the StatementCode object to remove by its Value value
	 *  @since 1.5r1
	 */
	public void removeStatementCode( String value ) { 
		removeChild( InstrDTD.STATEMENTCODES_STATEMENTCODE, new String[] { value.toString() } );
	}

	/**
	 *  Gets a <code>StatementCode</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the StatementCode object to return by its "Value" attribute value
	 *  @return A <code>StatementCode</code> object
	 *  @since 1.5r1
	 */
	public StatementCode getStatementCode( String value ) { 
		return (StatementCode)getChild( InstrDTD.STATEMENTCODES_STATEMENTCODE, new String[] { value.toString() } );
	}

	/**
	 *  Gets all <code>StatementCode</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>StatementCode</code> objects
	 *  @since 1.5r1
	 */
	public StatementCode[] getStatementCodes() {
		List<SIFElement> v = getChildList( InstrDTD.STATEMENTCODES_STATEMENTCODE);
		StatementCode[] cvt = new StatementCode[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>StatementCode</code> objects. All existing 
	 * <code>StatementCode</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>StatementCodes</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setStatementCodes( StatementCode[] statementcodes ) {
		setChildren( InstrDTD.STATEMENTCODES_STATEMENTCODE, statementcodes );
	}

}
