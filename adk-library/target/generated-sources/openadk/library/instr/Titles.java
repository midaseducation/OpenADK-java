// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.instr;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class Titles extends SIFKeyedList<Title>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public Titles() {
		super( InstrDTD.TITLES );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param title Name of this type of curriculum object (e.g., "American Revolutionary War")
	 */
	public Titles( Title title ) {
		super( InstrDTD.TITLES );
		this.safeAddChild( InstrDTD.TITLES_TITLE, title );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( InstrDTD.TITLES_TITLE );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { InstrDTD.TITLES_TITLE };
	}

	/**
	 *  Adds a new <code>&lt;Title&gt;</code> repeatable element.
	 *  This form of <code>setTitle</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setTitle</code>
	 *  that accepts a single <code>Title</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;Title&gt; element
	 *  @since 1.5r1
	 */
	public void addTitle( String value ) {
		addChild( InstrDTD.TITLES_TITLE, new Title( value ) );
	}

	/**
	 *  Removes a <code>Title</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the Title object to remove by its Value value
	 *  @since 1.5r1
	 */
	public void removeTitle( String value ) { 
		removeChild( InstrDTD.TITLES_TITLE, new String[] { value.toString() } );
	}

	/**
	 *  Gets a <code>Title</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the Title object to return by its "Value" attribute value
	 *  @return A <code>Title</code> object
	 *  @since 1.5r1
	 */
	public Title getTitle( String value ) { 
		return (Title)getChild( InstrDTD.TITLES_TITLE, new String[] { value.toString() } );
	}

	/**
	 *  Gets all <code>Title</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Title</code> objects
	 *  @since 1.5r1
	 */
	public Title[] getTitles() {
		List<SIFElement> v = getChildList( InstrDTD.TITLES_TITLE);
		Title[] cvt = new Title[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Title</code> objects. All existing 
	 * <code>Title</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Titles</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setTitles( Title[] titles ) {
		setChildren( InstrDTD.TITLES_TITLE, titles );
	}

}
