// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.instr;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class PredecessorItems extends SIFKeyedList<LearningStandardItemRefId>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public PredecessorItems() {
		super( InstrDTD.PREDECESSORITEMS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param learningStandardItemRefId GUID assigned to the LearningStandardItem directly above it in the hierarchy tree. This is a repeatable element because a single granular item may relate to multiple parent levels of the hierarchy.
	 */
	public PredecessorItems( LearningStandardItemRefId learningStandardItemRefId ) {
		super( InstrDTD.PREDECESSORITEMS );
		this.safeAddChild( InstrDTD.PREDECESSORITEMS_LEARNINGSTANDARDITEMREFID, learningStandardItemRefId );
	}

	/**
	 *  Adds a new <code>&lt;LearningStandardItemRefId&gt;</code> repeatable element.
	 *  This form of <code>setLearningStandardItemRefId</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setLearningStandardItemRefId</code>
	 *  that accepts a single <code>LearningStandardItemRefId</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;LearningStandardItemRefId&gt; element
	 *  @since 1.5r1
	 */
	public void addLearningStandardItemRefId( String value ) {
		addChild( InstrDTD.PREDECESSORITEMS_LEARNINGSTANDARDITEMREFID, new LearningStandardItemRefId( value ) );
	}

	/**
	 *  Removes a <code>LearningStandardItemRefId</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the LearningStandardItemRefId object to remove by its Value value
	 *  @since 1.5r1
	 */
	public void removeLearningStandardItemRefId( String value ) { 
		removeChild( InstrDTD.PREDECESSORITEMS_LEARNINGSTANDARDITEMREFID, new String[] { value.toString() } );
	}

	/**
	 *  Gets a <code>LearningStandardItemRefId</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the LearningStandardItemRefId object to return by its "Value" attribute value
	 *  @return A <code>LearningStandardItemRefId</code> object
	 *  @since 1.5r1
	 */
	public LearningStandardItemRefId getLearningStandardItemRefId( String value ) { 
		return (LearningStandardItemRefId)getChild( InstrDTD.PREDECESSORITEMS_LEARNINGSTANDARDITEMREFID, new String[] { value.toString() } );
	}

	/**
	 *  Gets all <code>LearningStandardItemRefId</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>LearningStandardItemRefId</code> objects
	 *  @since 1.5r1
	 */
	public LearningStandardItemRefId[] getLearningStandardItemRefIds() {
		List<SIFElement> v = getChildList( InstrDTD.PREDECESSORITEMS_LEARNINGSTANDARDITEMREFID);
		LearningStandardItemRefId[] cvt = new LearningStandardItemRefId[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>LearningStandardItemRefId</code> objects. All existing 
	 * <code>LearningStandardItemRefId</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>LearningStandardItemRefIds</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setLearningStandardItemRefIds( LearningStandardItemRefId[] learningstandarditemrefids ) {
		setChildren( InstrDTD.PREDECESSORITEMS_LEARNINGSTANDARDITEMREFID, learningstandarditemrefids );
	}

}
