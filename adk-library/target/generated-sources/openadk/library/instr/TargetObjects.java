// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.instr;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.6
 */
public class TargetObjects extends SIFElement
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public TargetObjects() {
		super( InstrDTD.TARGETOBJECTS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param targetObject At least one target for the learning standard linkage.
	 *  @param sifRefId The RefId for the LearningResource or AssessmentItem
	 */
	public TargetObjects( TargetObject targetObject, String sifRefId ) {
		super( InstrDTD.TARGETOBJECTS );
		this.addTargetObject( targetObject );
		this.setSIF_RefId(sifRefId);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		StringBuilder b = new StringBuilder();
		b.append( getFieldValue( InstrDTD.TARGETOBJECTS_TARGETOBJECT ) );
		b.append('.');
		b.append( getFieldValue( InstrDTD.TARGETOBJECTS_SIF_REFID ) );
		return b.toString();
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { InstrDTD.TARGETOBJECTS_TARGETOBJECT, InstrDTD.TARGETOBJECTS_SIF_REFID };
	}

	/**
	 *  Adds a new <code>&lt;TargetObject&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"At least one target for the learning standard linkage."</i><p>
	 *
	 *  @param value A <code>TargetObject</code> object
	 *  @since 2.6
	 */
	public void addTargetObject( TargetObject value ) { 
		addChild( InstrDTD.TARGETOBJECTS_TARGETOBJECT, value);
	}

	/**
	 *  Adds a new <code>&lt;TargetObject&gt;</code> repeatable element.
	 *  This form of <code>setTargetObject</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setTargetObject</code>
	 *  that accepts a single <code>TargetObject</code> object.
	 *
	 *  @param objectType The Target Object name referenced.
	 *  @param value Gets or sets the content value of the &lt;TargetObject&gt; element
	 *  @since 2.6
	 */
	public void addTargetObject( ObjectTypeTarget objectType, String value ) {
		addChild( InstrDTD.TARGETOBJECTS_TARGETOBJECT, new TargetObject( objectType, value ) );
	}

	/**
	 *  Removes a <code>TargetObject</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param objectType Identifies the TargetObject object to remove by its ObjectType value
	 *  @since 2.6
	 */
	public void removeTargetObject( ObjectTypeTarget objectType ) { 
		removeChild( InstrDTD.TARGETOBJECTS_TARGETOBJECT, new String[] { objectType.toString() } );
	}

	/**
	 *  Gets a <code>TargetObject</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param objectType Identifies the TargetObject object to return by its "ObjectType" attribute value
	 *  @return A <code>TargetObject</code> object
	 *  @since 2.6
	 */
	public TargetObject getTargetObject( ObjectTypeTarget objectType ) { 
		return (TargetObject)getChild( InstrDTD.TARGETOBJECTS_TARGETOBJECT, new String[] { objectType.toString() } );
	}

	/**
	 *  Gets all <code>TargetObject</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>TargetObject</code> objects
	 *  @since 2.6
	 */
	public TargetObject[] getTargetObjects() {
		List<SIFElement> v = getChildList( InstrDTD.TARGETOBJECTS_TARGETOBJECT);
		TargetObject[] cvt = new TargetObject[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>TargetObject</code> objects. All existing 
	 * <code>TargetObject</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>TargetObjects</code>.
	 *
	 *  @since 2.6
	 */
	public void setTargetObjects( TargetObject[] targetobjects ) {
		setChildren( InstrDTD.TARGETOBJECTS_TARGETOBJECT, targetobjects );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_RefId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The RefId for the LearningResource or AssessmentItem"</i><p>
	 *
	 *  @return The <code>SIF_RefId</code> element of this object.
	 *  @since 2.6
	 */
	public String getSIF_RefId() { 
		return (String) getSIFSimpleFieldValue( InstrDTD.TARGETOBJECTS_SIF_REFID );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_RefId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The RefId for the LearningResource or AssessmentItem"</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.6
	 */
	public void setSIF_RefId( String value ) { 
		setFieldValue( InstrDTD.TARGETOBJECTS_SIF_REFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;AssociationStrength&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"A number greater than 0 and less than or equal to 1. This indicates the strength of the association between the one or more Learning Standards and this target object."</i><p>
	 *
	 *  @return The <code>AssociationStrength</code> element of this object.
	 *  @since 2.6
	 */
	public BigDecimal getAssociationStrength() { 
		return (BigDecimal) getSIFSimpleFieldValue( InstrDTD.TARGETOBJECTS_ASSOCIATIONSTRENGTH );
	}

	/**
	 *  Sets the value of the <code>&lt;AssociationStrength&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"A number greater than 0 and less than or equal to 1. This indicates the strength of the association between the one or more Learning Standards and this target object."</i><p>
	 *
	 *  @param value A <code>BigDecimal</code> object
	 *  @since 2.6
	 */
	public void setAssociationStrength( BigDecimal value ) { 
		setFieldValue( InstrDTD.TARGETOBJECTS_ASSOCIATIONSTRENGTH, new SIFDecimal( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;AssociationType&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The type of relationship or cardinality being modeled, e.g., predecessor, prerequisite, unidirectional, nondirectional, is a component of, etc."</i><p>
	 *
	 *  @return The <code>AssociationType</code> element of this object.
	 *  @since 2.6
	 */
	public String getAssociationType() { 
		return (String) getSIFSimpleFieldValue( InstrDTD.TARGETOBJECTS_ASSOCIATIONTYPE );
	}

	/**
	 *  Sets the value of the <code>&lt;AssociationType&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The type of relationship or cardinality being modeled, e.g., predecessor, prerequisite, unidirectional, nondirectional, is a component of, etc."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.6
	 */
	public void setAssociationType( String value ) { 
		setFieldValue( InstrDTD.TARGETOBJECTS_ASSOCIATIONTYPE, new SIFString( value ), value );
	}

}
