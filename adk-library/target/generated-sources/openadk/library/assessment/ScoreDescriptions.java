// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.assessment;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.6
 */
public class ScoreDescriptions extends SIFKeyedList<AbstractContentElementType>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public ScoreDescriptions() {
		super( AssessmentDTD.SCOREDESCRIPTIONS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param scoreDescription An individual statement that defines the specific expectations that the response must illustrate in order to achieve this score point. This is a complex content type in order to support math or other subjects that may require non-text representations of expectations.
	 */
	public ScoreDescriptions( AbstractContentElementType scoreDescription ) {
		super( AssessmentDTD.SCOREDESCRIPTIONS );
		this.safeAddChild( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION, scoreDescription );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION };
	}

	/**
	 *  Adds a new <code>&lt;ScoreDescription&gt;</code> repeatable element.
	 *  This form of <code>setScoreDescription</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setScoreDescription</code>
	 *  that accepts a single <code>AbstractContentElementType</code> object.
	 *
	 *  @param mimeType MIME type to indicate the content type.
	 *  @since 2.6
	 */
	public void addScoreDescription( String mimeType ) {
		addChild( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION, new AbstractContentElementType( mimeType ) );
	}

	/**
	 *  Removes an <code>AbstractContentElementType</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param mimeType Identifies the AbstractContentElementType object to remove by its MIMEType value
	 *  @since 2.6
	 */
	public void removeScoreDescription( String mimeType ) { 
		removeChild( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION, new String[] { mimeType.toString() } );
	}

	/**
	 *  Gets an <code>AbstractContentElementType</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param mimeType Identifies the AbstractContentElementType object to return by its "MIMEType" attribute value
	 *  @return An <code>AbstractContentElementType</code> object
	 *  @since 2.6
	 */
	public AbstractContentElementType getScoreDescription( String mimeType ) { 
		return (AbstractContentElementType)getChild( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION, new String[] { mimeType.toString() } );
	}

	/**
	 *  Gets all <code>AbstractContentElementType</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>AbstractContentElementType</code> objects
	 *  @since 2.6
	 */
	public AbstractContentElementType[] getScoreDescriptions() {
		List<SIFElement> v = getChildList( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION);
		AbstractContentElementType[] cvt = new AbstractContentElementType[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>AbstractContentElementType</code> objects. All existing 
	 * <code>AbstractContentElementType</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>AbstractContentElementTypes</code>.
	 *
	 *  @since 2.6
	 */
	public void setScoreDescriptions( AbstractContentElementType[] scoredescriptions ) {
		setChildren( AssessmentDTD.SCOREDESCRIPTIONS_SCOREDESCRIPTION, scoredescriptions );
	}

}
