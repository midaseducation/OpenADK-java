// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.infra;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class PasswordList extends SIFKeyedList<Password>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public PasswordList() {
		super( InfraDTD.PASSWORDLIST );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param password A representation of the user's password using the given algorithm.
	 */
	public PasswordList( Password password ) {
		super( InfraDTD.PASSWORDLIST );
		this.safeAddChild( InfraDTD.PASSWORDLIST_PASSWORD, password );
	}

	/**
	 *  Adds a new <code>&lt;Password&gt;</code> repeatable element.
	 *  This form of <code>setPassword</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setPassword</code>
	 *  that accepts a single <code>Password</code> object.
	 *
	 *  @param algorithm The method used to encrypt the user's password. See the implementation details below.
	 *  @param keyName The name of the key to be used for decryption of the password.  Left blank for plain, encoded text (Algorithm attribute value of "base64") and hash algorithms.
	 *  @param value Gets or sets the content value of the &lt;Password&gt; element
	 *  @since 1.5r1
	 */
	public void addPassword( PasswordAlgorithm algorithm, String keyName, String value ) {
		addChild( InfraDTD.PASSWORDLIST_PASSWORD, new Password( algorithm, keyName, value ) );
	}

	/**
	 *  Removes a <code>Password</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param algorithm Identifies the Password object to remove by its Algorithm value
	 *  @since 1.5r1
	 */
	public void removePassword( PasswordAlgorithm algorithm ) { 
		removeChild( InfraDTD.PASSWORDLIST_PASSWORD, new String[] { algorithm.toString() } );
	}

	/**
	 *  Gets a <code>Password</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param algorithm Identifies the Password object to return by its "Algorithm" attribute value
	 *  @return A <code>Password</code> object
	 *  @since 1.5r1
	 */
	public Password getPassword( PasswordAlgorithm algorithm ) { 
		return (Password)getChild( InfraDTD.PASSWORDLIST_PASSWORD, new String[] { algorithm.toString() } );
	}

	/**
	 *  Gets all <code>Password</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Password</code> objects
	 *  @since 1.5r1
	 */
	public Password[] getPasswords() {
		List<SIFElement> v = getChildList( InfraDTD.PASSWORDLIST_PASSWORD);
		Password[] cvt = new Password[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Password</code> objects. All existing 
	 * <code>Password</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Passwords</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setPasswords( Password[] passwords ) {
		setChildren( InfraDTD.PASSWORDLIST_PASSWORD, passwords );
	}

}
