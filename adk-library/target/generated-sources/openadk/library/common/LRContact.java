// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.common;

import openadk.library.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class LRContact extends SIFElement
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public LRContact() {
		super( CommonDTD.LRCONTACT );
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Name of contact person. Use the generic element Name."</i><p>
	 *
	 *  @param value A <code>Name</code> object
	 *  @since 1.5r1
	 */
	public void addName( Name value ) { 
		addChild( CommonDTD.LRCONTACT_NAME, value);
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> repeatable element.
	 *  This form of <code>setName</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setName</code>
	 *  that accepts a single <code>Name</code> object.
	 *
	 *  @param type Code that specifies what type of name this is.  If unsure, use 04.
	 *  @param lastName The last name.
	 *  @param firstName The first name.
	 *  @since 1.5r1
	 */
	public void addName( NameType type, String lastName, String firstName ) {
		addChild( CommonDTD.LRCONTACT_NAME, new Name( type, lastName, firstName ) );
	}

	/**
	 *  Removes a <code>Name</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Name object to remove by its Type value
	 *  @since 1.5r1
	 */
	public void removeName( NameType type ) { 
		removeChild( CommonDTD.LRCONTACT_NAME, new String[] { type.toString() } );
	}

	/**
	 *  Gets a <code>Name</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Name object to return by its "Type" attribute value
	 *  @return A <code>Name</code> object
	 *  @since 1.5r1
	 */
	public Name getName( NameType type ) { 
		return (Name)getChild( CommonDTD.LRCONTACT_NAME, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Name</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Name</code> objects
	 *  @since 1.5r1
	 */
	public Name[] getNames() {
		List<SIFElement> v = getChildList( CommonDTD.LRCONTACT_NAME);
		Name[] cvt = new Name[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Name</code> objects. All existing 
	 * <code>Name</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Names</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setNames( Name[] names ) {
		setChildren( CommonDTD.LRCONTACT_NAME, names );
	}

	/**
	 *  Sets the value of the <code>&lt;Address&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Address of organization or company."</i><p>
	 *
	 *  @param value A <code>Address</code> object
	 *  @since 1.5r1
	 */
	public void setAddress( Address value ) { 
		removeChild( CommonDTD.LRCONTACT_ADDRESS );
		addChild( CommonDTD.LRCONTACT_ADDRESS, value);
	}

	/**
	 *  Sets the value of the <code>&lt;Address&gt;</code> child element.
	 *  This form of <code>setAddress</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setAddress</code>
	 *  that accepts a single <code>Address</code> object.
	 *
	 *  @param type Code that defines the location of the address.  Note:  A subset of specific valid values for each instance in a data object may be listed in that object.
	 *  @param street The street part of the address
	 *  @param city The city part of the address.
	 *  @param stateProvince The state or province code.
	 *  @param country The country code.
	 *  @param postalCode The ZIP/postal code.
	 *  @since 1.5r1
	 */
	public void setAddress( AddressType type, Street street, String city, StatePrCode stateProvince, CountryCode country, String postalCode ) {
		removeChild( CommonDTD.LRCONTACT_ADDRESS);
		addChild( CommonDTD.LRCONTACT_ADDRESS, new Address( type, street, city, stateProvince, country, postalCode ) );
	}

	/**
	 *  Gets the value of the <code>&lt;Address&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Address of organization or company."</i><p>
	 *
	 *  @return An <code>Address</code> object
	 *  @since 1.5r1
	 */
	public Address getAddress() { 
		return (Address)getChild( CommonDTD.LRCONTACT_ADDRESS);
	}

	/**
	 *  Removes the <code>Address</code> child element previously created by calling <code>setAddress</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeAddress() { 
		removeChild( CommonDTD.LRCONTACT_ADDRESS );
	}

	/**
	 *  Sets the value of the <code>&lt;PhoneNumber&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Phone number of organization or company."</i><p>
	 *
	 *  @param value A <code>PhoneNumber</code> object
	 *  @since 1.5r1
	 */
	public void setPhoneNumber( PhoneNumber value ) { 
		removeChild( CommonDTD.LRCONTACT_PHONENUMBER );
		addChild( CommonDTD.LRCONTACT_PHONENUMBER, value);
	}

	/**
	 *  Sets the value of the <code>&lt;PhoneNumber&gt;</code> child element.
	 *  This form of <code>setPhoneNumber</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setPhoneNumber</code>
	 *  that accepts a single <code>PhoneNumber</code> object.
	 *
	 *  @param type Code that specifies what type of phone number this is.  Note: A subset of valid values may be specified in data objects.
	 *  @param number Phone number.  Acceptable formats:
	 *  @since 1.5r1
	 */
	public void setPhoneNumber( PhoneNumberType type, String number ) {
		removeChild( CommonDTD.LRCONTACT_PHONENUMBER);
		addChild( CommonDTD.LRCONTACT_PHONENUMBER, new PhoneNumber( type, number ) );
	}

	/**
	 *  Gets the value of the <code>&lt;PhoneNumber&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Phone number of organization or company."</i><p>
	 *
	 *  @return A <code>PhoneNumber</code> object
	 *  @since 1.5r1
	 */
	public PhoneNumber getPhoneNumber() { 
		return (PhoneNumber)getChild( CommonDTD.LRCONTACT_PHONENUMBER);
	}

	/**
	 *  Removes the <code>PhoneNumber</code> child element previously created by calling <code>setPhoneNumber</code>
	 *
	 *  @since 1.5r1
	 */
	public void removePhoneNumber() { 
		removeChild( CommonDTD.LRCONTACT_PHONENUMBER );
	}

	/**
	 *  Sets the value of the <code>&lt;Email&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The email of the organization or company."</i><p>
	 *
	 *  @param value A <code>Email</code> object
	 *  @since 1.5r1
	 */
	public void setEmail( Email value ) { 
		removeChild( CommonDTD.LRCONTACT_EMAIL );
		addChild( CommonDTD.LRCONTACT_EMAIL, value);
	}

	/**
	 *  Sets the value of the <code>&lt;Email&gt;</code> child element.
	 *  This form of <code>setEmail</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setEmail</code>
	 *  that accepts a single <code>Email</code> object.
	 *
	 *  @param type This attribute specifies the type of e-mail address.
	 *  @param value Gets or sets the content value of the &lt;Email&gt; element
	 *  @since 1.5r1
	 */
	public void setEmail( EmailType type, String value ) {
		removeChild( CommonDTD.LRCONTACT_EMAIL);
		addChild( CommonDTD.LRCONTACT_EMAIL, new Email( type, value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;Email&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The email of the organization or company."</i><p>
	 *
	 *  @return An <code>Email</code> object
	 *  @since 1.5r1
	 */
	public Email getEmail() { 
		return (Email)getChild( CommonDTD.LRCONTACT_EMAIL);
	}

	/**
	 *  Removes the <code>Email</code> child element previously created by calling <code>setEmail</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeEmail() { 
		removeChild( CommonDTD.LRCONTACT_EMAIL );
	}

}
