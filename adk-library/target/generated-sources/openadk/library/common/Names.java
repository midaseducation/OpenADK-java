// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.common;

import openadk.library.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  Names of a person.<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.4
 */
public class Names extends SIFActionList<Name>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public Names() {
		super( CommonDTD.NAMES );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param name Name of the person.
	 */
	public Names( Name name ) {
		super( CommonDTD.NAMES );
		this.safeAddChild( CommonDTD.NAMES_NAME, name );
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> repeatable element.
	 *  This form of <code>setName</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setName</code>
	 *  that accepts a single <code>Name</code> object.
	 *
	 *  @param type Code that specifies what type of name this is.  If unsure, use 04.
	 *  @param lastName The last name.
	 *  @param firstName The first name.
	 *  @since 2.4
	 */
	public void addName( NameType type, String lastName, String firstName ) {
		addChild( CommonDTD.NAMES_NAME, new Name( type, lastName, firstName ) );
	}

	/**
	 *  Removes a <code>Name</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Name object to remove by its Type value
	 *  @since 2.4
	 */
	public void removeName( NameType type ) { 
		removeChild( CommonDTD.NAMES_NAME, new String[] { type.toString() } );
	}

	/**
	 *  Gets a <code>Name</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Name object to return by its "Type" attribute value
	 *  @return A <code>Name</code> object
	 *  @since 2.4
	 */
	public Name getName( NameType type ) { 
		return (Name)getChild( CommonDTD.NAMES_NAME, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Name</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Name</code> objects
	 *  @since 2.4
	 */
	public Name[] getNames() {
		List<SIFElement> v = getChildList( CommonDTD.NAMES_NAME);
		Name[] cvt = new Name[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Name</code> objects. All existing 
	 * <code>Name</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Names</code>.
	 *
	 *  @since 2.4
	 */
	public void setNames( Name[] names ) {
		setChildren( CommonDTD.NAMES_NAME, names );
	}

}
