// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.common;

import openadk.library.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  A list of Address elements<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.1
 */
public class AddressList extends SIFActionList<Address>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public AddressList() {
		super( CommonDTD.ADDRESSLIST );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param address This element contains information related to employee's address information.For a description of this element, see 5.1.1 Address.
	 */
	public AddressList( Address address ) {
		super( CommonDTD.ADDRESSLIST );
		this.safeAddChild( CommonDTD.ADDRESSLIST_ADDRESS, address );
	}

	/**
	 *  Adds a new <code>&lt;Address&gt;</code> repeatable element.
	 *  This form of <code>setAddress</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setAddress</code>
	 *  that accepts a single <code>Address</code> object.
	 *
	 *  @param type Code that defines the location of the address.  Note:  A subset of specific valid values for each instance in a data object may be listed in that object.
	 *  @param street The street part of the address
	 *  @param city The city part of the address.
	 *  @param stateProvince The state or province code.
	 *  @param country The country code.
	 *  @param postalCode The ZIP/postal code.
	 *  @since 1.1
	 */
	public void addAddress( AddressType type, Street street, String city, StatePrCode stateProvince, CountryCode country, String postalCode ) {
		addChild( CommonDTD.ADDRESSLIST_ADDRESS, new Address( type, street, city, stateProvince, country, postalCode ) );
	}

	/**
	 *  Removes an <code>Address</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Address object to remove by its Type value
	 *  @since 1.1
	 */
	public void removeAddress( AddressType type ) { 
		removeChild( CommonDTD.ADDRESSLIST_ADDRESS, new String[] { type.toString() } );
	}

	/**
	 *  Gets an <code>Address</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Address object to return by its "Type" attribute value
	 *  @return An <code>Address</code> object
	 *  @since 1.1
	 */
	public Address getAddress( AddressType type ) { 
		return (Address)getChild( CommonDTD.ADDRESSLIST_ADDRESS, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Address</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Address</code> objects
	 *  @since 1.1
	 */
	public Address[] getAddresses() {
		List<SIFElement> v = getChildList( CommonDTD.ADDRESSLIST_ADDRESS);
		Address[] cvt = new Address[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Address</code> objects. All existing 
	 * <code>Address</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Addresses</code>.
	 *
	 *  @since 1.1
	 */
	public void setAddresses( Address[] addresses ) {
		setChildren( CommonDTD.ADDRESSLIST_ADDRESS, addresses );
	}

}
