// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.common;

import openadk.library.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  A list of ExtendedParameter elements<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.4
 */
public class ExtendedParameters extends SIFList<ExtendedParameter>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public ExtendedParameters() {
		super( CommonDTD.EXTENDEDPARAMETERS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param extendedParameter An arbitrary parameter with a string name and value
	 */
	public ExtendedParameters( ExtendedParameter extendedParameter ) {
		super( CommonDTD.EXTENDEDPARAMETERS );
		this.safeAddChild( CommonDTD.EXTENDEDPARAMETERS_EXTENDEDPARAMETER, extendedParameter );
	}

	/**
	 *  Adds a new <code>&lt;ExtendedParameter&gt;</code> repeatable element.
	 *  This form of <code>setExtendedParameter</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setExtendedParameter</code>
	 *  that accepts a single <code>ExtendedParameter</code> object.
	 *
	 *  @param sifName The name of the parameter
	 *  @param sifValue The value of the parameter
	 *  @since 2.4
	 */
	public void addExtendedParameter( String sifName, String sifValue ) {
		addChild( CommonDTD.EXTENDEDPARAMETERS_EXTENDEDPARAMETER, new ExtendedParameter( sifName, sifValue ) );
	}

	/**
	 *  Removes an <code>ExtendedParameter</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param sifName Identifies the ExtendedParameter object to remove by its SIF_Name value
	 *  @param sifValue Identifies the ExtendedParameter object to remove by its SIF_Value value
	 *  @since 2.4
	 */
	public void removeExtendedParameter( String sifName, String sifValue ) { 
		removeChild( CommonDTD.EXTENDEDPARAMETERS_EXTENDEDPARAMETER, new String[] { sifName.toString(),sifValue.toString() } );
	}

	/**
	 *  Gets an <code>ExtendedParameter</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param sifName Identifies the ExtendedParameter object to return by its "SIF_Name" attribute value
	 *  @param sifValue Identifies the ExtendedParameter object to return by its "SIF_Value" attribute value
	 *  @return An <code>ExtendedParameter</code> object
	 *  @since 2.4
	 */
	public ExtendedParameter getExtendedParameter( String sifName, String sifValue ) { 
		return (ExtendedParameter)getChild( CommonDTD.EXTENDEDPARAMETERS_EXTENDEDPARAMETER, new String[] { sifName.toString(),sifValue.toString() } );
	}

	/**
	 *  Gets all <code>ExtendedParameter</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>ExtendedParameter</code> objects
	 *  @since 2.4
	 */
	public ExtendedParameter[] getExtendedParameters() {
		List<SIFElement> v = getChildList( CommonDTD.EXTENDEDPARAMETERS_EXTENDEDPARAMETER);
		ExtendedParameter[] cvt = new ExtendedParameter[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>ExtendedParameter</code> objects. All existing 
	 * <code>ExtendedParameter</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>ExtendedParameters</code>.
	 *
	 *  @since 2.4
	 */
	public void setExtendedParameters( ExtendedParameter[] extendedparameters ) {
		setChildren( CommonDTD.EXTENDEDPARAMETERS_EXTENDEDPARAMETER, extendedparameters );
	}

}
