// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.reporting;

import openadk.library.*;
import openadk.library.common.*;
import openadk.library.infra.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  This object is an envelope used to send other data objects, typically reports, to authorities such as state departments of education, district offices, other schools, etc.  It is also used to signal a data collector agent that a report is compiled and ready to be requested.  SIF_ReportObject contains a data object, which is either complete or partial (a partial data object is one that contains a subset of the elements for the data object).  One or a series of SIF_ReportObjects contained within one or a series of related SIF_Response messages makes up a complete report.  SIF_Events are reported.<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class SIF_ReportObject extends SIFDataObject
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public SIF_ReportObject() {
		super( ADK.getSIFVersion(), ReportingDTD.SIF_REPORTOBJECT );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param refId The ID (GUID) that uniquely identifies this instance of a report.
	 */
	public SIF_ReportObject( String refId ) {
		super( ADK.getSIFVersion(), ReportingDTD.SIF_REPORTOBJECT );
		this.setRefId(refId);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( ReportingDTD.SIF_REPORTOBJECT_REFID );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { ReportingDTD.SIF_REPORTOBJECT_REFID };
	}

	/**
	 *  Gets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The ID (GUID) that uniquely identifies this instance of a report."</i><p>
	 *
	 *  @return The <code>RefId</code> attribute of this object.
	 *  @since 1.5r1
	 */
	public String getRefId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.SIF_REPORTOBJECT_REFID );
	}

	/**
	 *  Sets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The ID (GUID) that uniquely identifies this instance of a report."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setRefId( String value ) { 
		setFieldValue( ReportingDTD.SIF_REPORTOBJECT_REFID, new SIFString( value ), value );
	}

	/**
	 *  Sets the value of the <code>&lt;ReportInfo&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Identifies the manifest for the report and characteristics of the submission. This element is a conditional element. This element is included or the ReportData element is included but never both at the same time within an instance of this object. See examples of the usage of the object below"</i><p>
	 *
	 *  @param value A <code>ReportInfo</code> object
	 *  @since 1.5r1
	 */
	public void setReportInfo( ReportInfo value ) { 
		removeChild( ReportingDTD.SIF_REPORTOBJECT_REPORTINFO );
		addChild( ReportingDTD.SIF_REPORTOBJECT_REPORTINFO, value);
	}

	/**
	 *  Sets the value of the <code>&lt;ReportInfo&gt;</code> child element.
	 *  This form of <code>setReportInfo</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setReportInfo</code>
	 *  that accepts a single <code>ReportInfo</code> object.
	 *
	 *  @param reportManifestRefId The report manifest corresponding to this report.
	 *  @param calculationDate The date on which the report was calculated.
	 *  @param submissionNumber A number that identifies the submission; beginning at 1 and incremented each time a submission is done for a particular report; used to indicate resubmission(s).
	 *  @param submissionReason Reason for the report submission.
	 *  @since 1.5r1
	 */
	public void setReportInfo( String reportManifestRefId, Calendar calculationDate, Integer submissionNumber, SubmissionReason submissionReason ) {
		removeChild( ReportingDTD.SIF_REPORTOBJECT_REPORTINFO);
		addChild( ReportingDTD.SIF_REPORTOBJECT_REPORTINFO, new ReportInfo( reportManifestRefId, calculationDate, submissionNumber, submissionReason ) );
	}

	/**
	 *  Gets the value of the <code>&lt;ReportInfo&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Identifies the manifest for the report and characteristics of the submission. This element is a conditional element. This element is included or the ReportData element is included but never both at the same time within an instance of this object. See examples of the usage of the object below"</i><p>
	 *
	 *  @return A <code>ReportInfo</code> object
	 *  @since 1.5r1
	 */
	public ReportInfo getReportInfo() { 
		return (ReportInfo)getChild( ReportingDTD.SIF_REPORTOBJECT_REPORTINFO);
	}

	/**
	 *  Removes the <code>ReportInfo</code> child element previously created by calling <code>setReportInfo</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeReportInfo() { 
		removeChild( ReportingDTD.SIF_REPORTOBJECT_REPORTINFO );
	}

	/**
	 *  Sets the value of the <code>&lt;ReportData&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Container element for the report content; one valid SIF object can occur as a child here. This element is conditional. 
							This element or ReportInfo or SIF_ExtendedQueryResults is included but never at the same time. 
							See examples of the usage of the object below."</i><p>
	 *
	 *  @param value A <code>ReportData</code> object
	 *  @since 1.5r1
	 */
	public void setReportData( ReportData value ) { 
		removeChild( ReportingDTD.SIF_REPORTOBJECT_REPORTDATA );
		addChild( ReportingDTD.SIF_REPORTOBJECT_REPORTDATA, value);
	}

	/**
	 *  Sets the value of the <code>&lt;ReportData&gt;</code> child element.
	 *  This form of <code>setReportData</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setReportData</code>
	 *  that accepts a single <code>ReportData</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;ReportData&gt; element
	 *  @since 1.5r1
	 */
	public void setReportData( String value ) {
		removeChild( ReportingDTD.SIF_REPORTOBJECT_REPORTDATA);
		addChild( ReportingDTD.SIF_REPORTOBJECT_REPORTDATA, new ReportData( value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;ReportData&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Container element for the report content; one valid SIF object can occur as a child here. This element is conditional. 
							This element or ReportInfo or SIF_ExtendedQueryResults is included but never at the same time. 
							See examples of the usage of the object below."</i><p>
	 *
	 *  @return A <code>ReportData</code> object
	 *  @since 1.5r1
	 */
	public ReportData getReportData() { 
		return (ReportData)getChild( ReportingDTD.SIF_REPORTOBJECT_REPORTDATA);
	}

	/**
	 *  Removes the <code>ReportData</code> child element previously created by calling <code>setReportData</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeReportData() { 
		removeChild( ReportingDTD.SIF_REPORTOBJECT_REPORTDATA );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_ExtendedQueryResults&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The report content resulting from a SIF_ExtendedQuery-based report.  This element is conditional.
							This element or ReportInfo or ReportData is included but never at the same time. "</i><p>
	 *
	 *  @param value A <code>SIF_ExtendedQueryResults</code> object
	 *  @since 2.0
	 */
	public void setSIF_ExtendedQueryResults( SIF_ExtendedQueryResults value ) { 
		removeChild( ReportingDTD.SIF_REPORTOBJECT_SIF_EXTENDEDQUERYRESULTS );
		addChild( ReportingDTD.SIF_REPORTOBJECT_SIF_EXTENDEDQUERYRESULTS, value);
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_ExtendedQueryResults&gt;</code> child element.
	 *  This form of <code>setSIF_ExtendedQueryResults</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setSIF_ExtendedQueryResults</code>
	 *  that accepts a single <code>SIF_ExtendedQueryResults</code> object.
	 *
	 *  @param sifColumnHeaders 
	 *  @param sifRows 
	 *  @since 2.0
	 */
	public void setSIF_ExtendedQueryResults( SIFColumnHeader sifColumnHeaders, SIF_Rows sifRows ) {
		removeChild( ReportingDTD.SIF_REPORTOBJECT_SIF_EXTENDEDQUERYRESULTS);
		addChild( ReportingDTD.SIF_REPORTOBJECT_SIF_EXTENDEDQUERYRESULTS, new SIF_ExtendedQueryResults( sifColumnHeaders, sifRows ) );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_ExtendedQueryResults&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The report content resulting from a SIF_ExtendedQuery-based report.  This element is conditional.
							This element or ReportInfo or ReportData is included but never at the same time. "</i><p>
	 *
	 *  @return A <code>SIF_ExtendedQueryResults</code> object
	 *  @since 2.0
	 */
	public SIF_ExtendedQueryResults getSIF_ExtendedQueryResults() { 
		return (SIF_ExtendedQueryResults)getChild( ReportingDTD.SIF_REPORTOBJECT_SIF_EXTENDEDQUERYRESULTS);
	}

	/**
	 *  Removes the <code>SIF_ExtendedQueryResults</code> child element previously created by calling <code>setSIF_ExtendedQueryResults</code>
	 *
	 *  @since 2.0
	 */
	public void removeSIF_ExtendedQueryResults() { 
		removeChild( ReportingDTD.SIF_REPORTOBJECT_SIF_EXTENDEDQUERYRESULTS );
	}

}
