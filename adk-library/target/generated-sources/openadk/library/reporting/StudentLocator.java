// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.reporting;

import openadk.library.*;
import openadk.library.common.*;
import openadk.library.infra.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  It is anticipated that the StudentLocator object will be removed from the next major version of this specification. (As of 2.4) An example SIF object that serves as a template for matching objects.  There is an implied EQ operator
						for every element/attribute value present and an implied And group of all resulting conditions.  Currently
						this is an experimental feature and limited to use with StudentLocator; wider use may be considered in future
						major versions of this specification.<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class StudentLocator extends SIFDataObject
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public StudentLocator() {
		super( ADK.getSIFVersion(), ReportingDTD.STUDENTLOCATOR );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param idStatus Communicates the orchestration status for the object.
	 *  @param refId Key
	 *  @param stateProvinceId This is the student's state-assigned ID. May be empty in a response where IdStatus is "Ambiguous."
	 *  @param transactionId GUID that allows requesters and responders to refer to the same logical StudentLocator "transaction" over more than one
						SIF_Request/SIF_Response exchange.
	 */
	public StudentLocator( IdStatus idStatus, String refId, String stateProvinceId, String transactionId ) {
		super( ADK.getSIFVersion(), ReportingDTD.STUDENTLOCATOR );
		this.setIdStatus( idStatus );
		this.setRefId(refId);
		this.setStateProvinceId(stateProvinceId);
		this.setTransactionId(transactionId);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( ReportingDTD.STUDENTLOCATOR_REFID );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { ReportingDTD.STUDENTLOCATOR_REFID };
	}

	/**
	 *  Gets the value of the <code>IdStatus</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Communicates the orchestration status for the object."</i><p>
	 *
	 *  @return The <code>IdStatus</code> attribute of this object.
	 *  @since 1.5r1
	 */
	public String getIdStatus() { 
		return getFieldValue( ReportingDTD.STUDENTLOCATOR_IDSTATUS );
	}

	/**
	 *  Sets the value of the <code>IdStatus</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Communicates the orchestration status for the object."</i><p>
	 *
	 *  @param value A constant defined by the <code>IdStatus</code> class
	 *  @since 1.5r1
	 */
	public void setIdStatus( IdStatus value ) { 
		setField( ReportingDTD.STUDENTLOCATOR_IDSTATUS, value );
	}

	/**
	 *  Sets the value of the <code>IdStatus</code> attribute as a String.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Communicates the orchestration status for the object."</i><p>
	 *
	 *  @param value The value as a String
	 *  @since 1.5r1
	 */
	public void setIdStatus( String value ) { 
		setField( ReportingDTD.STUDENTLOCATOR_IDSTATUS, value );
	}

	/**
	 *  Gets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Key"</i><p>
	 *
	 *  @return The <code>RefId</code> attribute of this object.
	 *  @since 2.7
	 */
	public String getRefId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_REFID );
	}

	/**
	 *  Sets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Key"</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.7
	 */
	public void setRefId( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_REFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;StateProvinceId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the student's state-assigned ID. May be empty in a response where IdStatus is "Ambiguous.""</i><p>
	 *  This element is known by more than one tag name depending on the version of SIF in use. The ADK will use the tag names shown below when parsing and rendering elements of this kind.<p>
	 *  <table width='50%' border='1'><tr><td align='center'><font face='verdana,helvetica' size='-1'>Version</font></td><td align='center'><font face='verdana,helvetica' size='-1'>Tag</font></td></tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF1.5r1 (and greater)</font></td><td>"StatePrId"</td>	 *  </tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF2.0 (and greater)</font></td><td>"StateProvinceId"</td>	 *  </tr>
	 *  </table><p>
	 *
	 *  @return The <code>StateProvinceId</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getStateProvinceId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_STATEPROVINCEID );
	}

	/**
	 *  Sets the value of the <code>&lt;StateProvinceId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the student's state-assigned ID. May be empty in a response where IdStatus is "Ambiguous.""</i><p>
	 *  This element is known by more than one tag name depending on the version of SIF in use. The ADK will use the tag names shown below when parsing and rendering elements of this kind.<p>
	 *  <table width='50%' border='1'><tr><td align='center'><font face='verdana,helvetica' size='-1'>Version</font></td><td align='center'><font face='verdana,helvetica' size='-1'>Tag</font></td></tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF1.5r1 (and greater)</font></td><td>"StatePrId"</td>	 *  </tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF2.0 (and greater)</font></td><td>"StateProvinceId"</td>	 *  </tr>
	 *  </table><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setStateProvinceId( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_STATEPROVINCEID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>TransactionId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"GUID that allows requesters and responders to refer to the same logical StudentLocator "transaction" over more than one
						SIF_Request/SIF_Response exchange."</i><p>
	 *
	 *  @return The <code>TransactionId</code> attribute of this object.
	 *  @since 2.0
	 */
	public String getTransactionId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_TRANSACTIONID );
	}

	/**
	 *  Sets the value of the <code>TransactionId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"GUID that allows requesters and responders to refer to the same logical StudentLocator "transaction" over more than one
						SIF_Request/SIF_Response exchange."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setTransactionId( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_TRANSACTIONID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;Confidence&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Confidence score. The main use of this element is when IdStatus equals "Ambiguous" and the state returns one or more* candidate matches. The interpretation is that the information populated in each returned object matches the information in the request to the extent expressed in this score. The matching/scoring algorithms (and resultant values) are defined by the particular state."</i><p>
	 *
	 *  @return The <code>Confidence</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getConfidence() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_CONFIDENCE );
	}

	/**
	 *  Sets the value of the <code>&lt;Confidence&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Confidence score. The main use of this element is when IdStatus equals "Ambiguous" and the state returns one or more* candidate matches. The interpretation is that the information populated in each returned object matches the information in the request to the extent expressed in this score. The matching/scoring algorithms (and resultant values) are defined by the particular state."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setConfidence( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_CONFIDENCE, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;LocalId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the requesting agency's unique ID for the student."</i><p>
	 *
	 *  @return The <code>LocalId</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getLocalId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_LOCALID );
	}

	/**
	 *  Sets the value of the <code>&lt;LocalId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"This is the requesting agency's unique ID for the student."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setLocalId( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_LOCALID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;StudentPersonalRefId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Requesting agency's local zone GUID of the student's StudentPersonal object."</i><p>
	 *
	 *  @return The <code>StudentPersonalRefId</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getStudentPersonalRefId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_STUDENTPERSONALREFID );
	}

	/**
	 *  Sets the value of the <code>&lt;StudentPersonalRefId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Requesting agency's local zone GUID of the student's StudentPersonal object."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setStudentPersonalRefId( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_STUDENTPERSONALREFID, new SIFString( value ), value );
	}

	/**
	 *  Adds a new <code>&lt;RequestingAgencyId&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Identification of the agency and/or location requesting the state ID. Optional because the SIF Zone infrastructure may provide adequate information for the state to ascertain the origin of the request."</i><p>
	 *
	 *  @param value A <code>RequestingAgencyId</code> object
	 *  @since 1.5r1
	 */
	public void addRequestingAgencyId( RequestingAgencyId value ) { 
		addChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, value);
	}

	/**
	 *  Adds a new <code>&lt;RequestingAgencyId&gt;</code> repeatable element.
	 *  This form of <code>setRequestingAgencyId</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setRequestingAgencyId</code>
	 *  that accepts a single <code>RequestingAgencyId</code> object.
	 *
	 *  @param type The functional level of the requesting agency.
	 *  @param value Gets or sets the content value of the &lt;RequestingAgencyId&gt; element
	 *  @since 1.5r1
	 */
	public void addRequestingAgencyId( RequestingAgencyIdType type, String value ) {
		addChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, new RequestingAgencyId( type, value ) );
	}

	/**
	 *  Removes a <code>RequestingAgencyId</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the RequestingAgencyId object to remove by its Type value
	 *  @since 1.5r1
	 */
	public void removeRequestingAgencyId( RequestingAgencyIdType type ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, new String[] { type.toString() } );
	}

	/**
	 *  Gets a <code>RequestingAgencyId</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the RequestingAgencyId object to return by its "Type" attribute value
	 *  @return A <code>RequestingAgencyId</code> object
	 *  @since 1.5r1
	 */
	public RequestingAgencyId getRequestingAgencyId( RequestingAgencyIdType type ) { 
		return (RequestingAgencyId)getChild( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>RequestingAgencyId</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>RequestingAgencyId</code> objects
	 *  @since 1.5r1
	 */
	public RequestingAgencyId[] getRequestingAgencyIds() {
		List<SIFElement> v = getChildList( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID);
		RequestingAgencyId[] cvt = new RequestingAgencyId[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>RequestingAgencyId</code> objects. All existing 
	 * <code>RequestingAgencyId</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>RequestingAgencyIds</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setRequestingAgencyIds( RequestingAgencyId[] requestingagencyids ) {
		setChildren( ReportingDTD.STUDENTLOCATOR_REQUESTINGAGENCYID, requestingagencyids );
	}

	/**
	 *  Sets the value of the <code>&lt;GradeLevel&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The student's current grade level."</i><p>
	 *
	 *  @param value A <code>GradeLevel</code> object
	 *  @since 1.5r1
	 */
	public void setGradeLevel( GradeLevel value ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL );
		addChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL, value);
	}

	/**
	 *  Sets the value of the <code>&lt;GradeLevel&gt;</code> child element.
	 *  This form of <code>setGradeLevel</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setGradeLevel</code>
	 *  that accepts a single <code>GradeLevel</code> object.
	 *
	 *  @param code Code representing the grade level.
	 *  @since 1.5r1
	 */
	public void setGradeLevel( GradeLevelCode code ) {
		removeChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL);
		addChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL, new GradeLevel( code ) );
	}

	/**
	 *  Gets the value of the <code>&lt;GradeLevel&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The student's current grade level."</i><p>
	 *
	 *  @return A <code>GradeLevel</code> object
	 *  @since 1.5r1
	 */
	public GradeLevel getGradeLevel() { 
		return (GradeLevel)getChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL);
	}

	/**
	 *  Removes the <code>GradeLevel</code> child element previously created by calling <code>setGradeLevel</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeGradeLevel() { 
		removeChild( ReportingDTD.STUDENTLOCATOR_GRADELEVEL );
	}

	/**
	 *  Gets the value of the <code>&lt;SSN&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Social security number of the student."</i><p>
	 *  This element is known by more than one tag name depending on the version of SIF in use. The ADK will use the tag names shown below when parsing and rendering elements of this kind.<p>
	 *  <table width='50%' border='1'><tr><td align='center'><font face='verdana,helvetica' size='-1'>Version</font></td><td align='center'><font face='verdana,helvetica' size='-1'>Tag</font></td></tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF1.5r1 (and greater)</font></td><td>"Ssn"</td>	 *  </tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF2.0 (and greater)</font></td><td>"SSN"</td>	 *  </tr>
	 *  </table><p>
	 *
	 *  @return The <code>SSN</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getSSN() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_SSN );
	}

	/**
	 *  Sets the value of the <code>&lt;SSN&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Social security number of the student."</i><p>
	 *  This element is known by more than one tag name depending on the version of SIF in use. The ADK will use the tag names shown below when parsing and rendering elements of this kind.<p>
	 *  <table width='50%' border='1'><tr><td align='center'><font face='verdana,helvetica' size='-1'>Version</font></td><td align='center'><font face='verdana,helvetica' size='-1'>Tag</font></td></tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF1.5r1 (and greater)</font></td><td>"Ssn"</td>	 *  </tr>
	 *  <tr>	 *  <td><font face='verdana,helvetica' size='-1'>SIF2.0 (and greater)</font></td><td>"SSN"</td>	 *  </tr>
	 *  </table><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setSSN( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_SSN, new SIFString( value ), value );
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The name(s) of the student."</i><p>
	 *
	 *  @param value A <code>Name</code> object
	 *  @since 1.5r1
	 */
	public void addName( Name value ) { 
		addChild( ReportingDTD.STUDENTLOCATOR_NAME, value);
	}

	/**
	 *  Adds a new <code>&lt;Name&gt;</code> repeatable element.
	 *  This form of <code>setName</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setName</code>
	 *  that accepts a single <code>Name</code> object.
	 *
	 *  @param type Code that specifies what type of name this is.  If unsure, use 04.
	 *  @param lastName The last name.
	 *  @param firstName The first name.
	 *  @since 1.5r1
	 */
	public void addName( NameType type, String lastName, String firstName ) {
		addChild( ReportingDTD.STUDENTLOCATOR_NAME, new Name( type, lastName, firstName ) );
	}

	/**
	 *  Removes a <code>Name</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Name object to remove by its Type value
	 *  @since 1.5r1
	 */
	public void removeName( NameType type ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_NAME, new String[] { type.toString() } );
	}

	/**
	 *  Gets a <code>Name</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Name object to return by its "Type" attribute value
	 *  @return A <code>Name</code> object
	 *  @since 1.5r1
	 */
	public Name getName( NameType type ) { 
		return (Name)getChild( ReportingDTD.STUDENTLOCATOR_NAME, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Name</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Name</code> objects
	 *  @since 1.5r1
	 */
	public Name[] getNames() {
		List<SIFElement> v = getChildList( ReportingDTD.STUDENTLOCATOR_NAME);
		Name[] cvt = new Name[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Name</code> objects. All existing 
	 * <code>Name</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Names</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setNames( Name[] names ) {
		setChildren( ReportingDTD.STUDENTLOCATOR_NAME, names );
	}

	/**
	 *  Adds a new <code>&lt;Address&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The address(es) of the student."</i><p>
	 *
	 *  @param value A <code>Address</code> object
	 *  @since 1.5r1
	 */
	public void addAddress( Address value ) { 
		addChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, value);
	}

	/**
	 *  Adds a new <code>&lt;Address&gt;</code> repeatable element.
	 *  This form of <code>setAddress</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setAddress</code>
	 *  that accepts a single <code>Address</code> object.
	 *
	 *  @param type Code that defines the location of the address.  Note:  A subset of specific valid values for each instance in a data object may be listed in that object.
	 *  @param street The street part of the address
	 *  @param city The city part of the address.
	 *  @param stateProvince The state or province code.
	 *  @param country The country code.
	 *  @param postalCode The ZIP/postal code.
	 *  @since 1.5r1
	 */
	public void addAddress( AddressType type, Street street, String city, StatePrCode stateProvince, CountryCode country, String postalCode ) {
		addChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, new Address( type, street, city, stateProvince, country, postalCode ) );
	}

	/**
	 *  Removes an <code>Address</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Address object to remove by its Type value
	 *  @since 1.5r1
	 */
	public void removeAddress( AddressType type ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, new String[] { type.toString() } );
	}

	/**
	 *  Gets an <code>Address</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the Address object to return by its "Type" attribute value
	 *  @return An <code>Address</code> object
	 *  @since 1.5r1
	 */
	public Address getAddress( AddressType type ) { 
		return (Address)getChild( ReportingDTD.STUDENTLOCATOR_ADDRESS, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>Address</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>Address</code> objects
	 *  @since 1.5r1
	 */
	public Address[] getAddresses() {
		List<SIFElement> v = getChildList( ReportingDTD.STUDENTLOCATOR_ADDRESS);
		Address[] cvt = new Address[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>Address</code> objects. All existing 
	 * <code>Address</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>Addresses</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setAddresses( Address[] addresses ) {
		setChildren( ReportingDTD.STUDENTLOCATOR_ADDRESS, addresses );
	}

	/**
	 *  Sets the value of the <code>&lt;Demographics&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Demographic information about the student. This will typically be the core matching information. Privacy considerations may mean that it is filled differently here than it might be in a local StudentPersonal, but it must include enough to drive the state's matching algorithms."</i><p>
	 *
	 *  @param value A <code>Demographics</code> object
	 *  @since 1.5r1
	 */
	public void setDemographics( Demographics value ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS );
		addChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS, value);
	}

	/**
	 *  Gets the value of the <code>&lt;Demographics&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Demographic information about the student. This will typically be the core matching information. Privacy considerations may mean that it is filled differently here than it might be in a local StudentPersonal, but it must include enough to drive the state's matching algorithms."</i><p>
	 *
	 *  @return A <code>Demographics</code> object
	 *  @since 1.5r1
	 */
	public Demographics getDemographics() { 
		return (Demographics)getChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS);
	}

	/**
	 *  Removes the <code>Demographics</code> child element previously created by calling <code>setDemographics</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeDemographics() { 
		removeChild( ReportingDTD.STUDENTLOCATOR_DEMOGRAPHICS );
	}

	/**
	 *  Adds a new <code>&lt;Contact&gt;</code> child element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Typically used to provide the state information about a student's parents and legal guardians."</i><p>
	 *
	 *  @param value A <code>SLContact</code> object
	 *  @since 1.5r1
	 */
	public void addContact( SLContact value ) { 
		addChild( ReportingDTD.STUDENTLOCATOR_CONTACT, value);
	}

	/**
	 *  Adds a new <code>&lt;Contact&gt;</code> repeatable element.
	 *  This form of <code>setContact</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setContact</code>
	 *  that accepts a single <code>SLContact</code> object.
	 *
	 *  @param relationship Relationship to the student.
	 *  @since 1.5r1
	 */
	public void addContact( Relationship relationship ) {
		addChild( ReportingDTD.STUDENTLOCATOR_CONTACT, new SLContact( relationship ) );
	}

	/**
	 *  Removes a <code>SLContact</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param relationship Identifies the SLContact object to remove by its Relationship value
	 *  @since 1.5r1
	 */
	public void removeContact( Relationship relationship ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_CONTACT, new String[] { relationship.toString() } );
	}

	/**
	 *  Gets a <code>SLContact</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param relationship Identifies the SLContact object to return by its "Relationship" attribute value
	 *  @return A <code>SLContact</code> object
	 *  @since 1.5r1
	 */
	public SLContact getContact( Relationship relationship ) { 
		return (SLContact)getChild( ReportingDTD.STUDENTLOCATOR_CONTACT, new String[] { relationship.toString() } );
	}

	/**
	 *  Gets all <code>SLContact</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>SLContact</code> objects
	 *  @since 1.5r1
	 */
	public SLContact[] getContacts() {
		List<SIFElement> v = getChildList( ReportingDTD.STUDENTLOCATOR_CONTACT);
		SLContact[] cvt = new SLContact[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>SLContact</code> objects. All existing 
	 * <code>SLContact</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>SLContacts</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setContacts( SLContact[] contacts ) {
		setChildren( ReportingDTD.STUDENTLOCATOR_CONTACT, contacts );
	}

	/**
	 *  Gets the value of the <code>&lt;EffectiveDate&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"For Requests, this should match StudentSchoolEnrollment/EntryDate."</i><p>
	 *
	 *  @return The <code>EffectiveDate</code> element of this object.
	 *  @since 1.5r1
	 */
	public Calendar getEffectiveDate() { 
		return (Calendar) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_EFFECTIVEDATE );
	}

	/**
	 *  Sets the value of the <code>&lt;EffectiveDate&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"For Requests, this should match StudentSchoolEnrollment/EntryDate."</i><p>
	 *
	 *  @param value A <code>Calendar</code> object
	 *  @since 1.5r1
	 */
	public void setEffectiveDate( Calendar value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_EFFECTIVEDATE, new SIFDate( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;StartDate&gt;</code> element.
	 *
	 *  @return The <code>StartDate</code> element of this object.
	 *  @since 2.0
	 */
	public Calendar getStartDate() { 
		return (Calendar) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_STARTDATE );
	}

	/**
	 *  Sets the value of the <code>&lt;StartDate&gt;</code> element.
	 *
	 *  @param value A <code>Calendar</code> object
	 *  @since 2.0
	 */
	public void setStartDate( Calendar value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_STARTDATE, new SIFDate( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;EndDate&gt;</code> element.
	 *
	 *  @return The <code>EndDate</code> element of this object.
	 *  @since 2.0
	 */
	public Calendar getEndDate() { 
		return (Calendar) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_ENDDATE );
	}

	/**
	 *  Sets the value of the <code>&lt;EndDate&gt;</code> element.
	 *
	 *  @param value A <code>Calendar</code> object
	 *  @since 2.0
	 */
	public void setEndDate( Calendar value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_ENDDATE, new SIFDate( value ), value );
	}

	/**
	 *  Sets the value of the <code>&lt;GraduationDate&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Indicates the date the student graduated--GradYear, GradYear and GradMonth, or GradYear, GradMonth and GradDay may be specified.  
						Intended to facilitate locating students that may not be currently enrolled
						in a school or district, particularly in the context of locating student identifiers for initiating a request for a student's academic record.  
						Supplied date values may often be approximations made by the entity endeavoring to request a student's academic record."</i><p>
	 *
	 *  @param value A <code>PartialDateType</code> object
	 *  @since 2.0
	 */
	public void setGraduationDate( PartialDateType value ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE );
		addChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE, value);
	}

	/**
	 *  Sets the value of the <code>&lt;GraduationDate&gt;</code> child element.
	 *  This form of <code>setGraduationDate</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setGraduationDate</code>
	 *  that accepts a single <code>PartialDateType</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;PartialDateType&gt; element
	 *  @since 2.0
	 */
	public void setGraduationDate( String value ) {
		removeChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE);
		addChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE, new PartialDateType( value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;GraduationDate&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Indicates the date the student graduated--GradYear, GradYear and GradMonth, or GradYear, GradMonth and GradDay may be specified.  
						Intended to facilitate locating students that may not be currently enrolled
						in a school or district, particularly in the context of locating student identifiers for initiating a request for a student's academic record.  
						Supplied date values may often be approximations made by the entity endeavoring to request a student's academic record."</i><p>
	 *
	 *  @return A <code>PartialDateType</code> object
	 *  @since 2.0
	 */
	public PartialDateType getGraduationDate() { 
		return (PartialDateType)getChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE);
	}

	/**
	 *  Removes the <code>GraduationDate</code> child element previously created by calling <code>setGraduationDate</code>
	 *
	 *  @since 2.0
	 */
	public void removeGraduationDate() { 
		removeChild( ReportingDTD.STUDENTLOCATOR_GRADUATIONDATE );
	}

	/**
	 *  Gets the value of the <code>&lt;SchoolAttendedName&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The name of the school last attended by the student."</i><p>
	 *
	 *  @return The <code>SchoolAttendedName</code> element of this object.
	 *  @since 2.0
	 */
	public String getSchoolAttendedName() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDNAME );
	}

	/**
	 *  Sets the value of the <code>&lt;SchoolAttendedName&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The name of the school last attended by the student."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setSchoolAttendedName( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDNAME, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;SchoolAttendedLocation&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The location of the school last attended by the student (e.g. city or county name, district name, etc.)."</i><p>
	 *
	 *  @return The <code>SchoolAttendedLocation</code> element of this object.
	 *  @since 2.0
	 */
	public String getSchoolAttendedLocation() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDLOCATION );
	}

	/**
	 *  Sets the value of the <code>&lt;SchoolAttendedLocation&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The location of the school last attended by the student (e.g. city or county name, district name, etc.)."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setSchoolAttendedLocation( String value ) { 
		setFieldValue( ReportingDTD.STUDENTLOCATOR_SCHOOLATTENDEDLOCATION, new SIFString( value ), value );
	}

	/**
	 *  Sets the value of the <code>&lt;OtherId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Additional student identifier not represented elsewhere in StudentLocator (e.g. the driver's license number of the student)."</i><p>
	 *
	 *  @param value A <code>OtherId</code> object
	 *  @since 2.0
	 */
	public void setOtherId( OtherId value ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_OTHERID );
		addChild( ReportingDTD.STUDENTLOCATOR_OTHERID, value);
	}

	/**
	 *  Sets the value of the <code>&lt;OtherId&gt;</code> child element.
	 *  This form of <code>setOtherId</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setOtherId</code>
	 *  that accepts a single <code>OtherId</code> object.
	 *
	 *  @param type Code that defines the type of this other ID.  Note: A subset of valid values may be specified in data objects.
	 *  @param value Gets or sets the content value of the &lt;OtherId&gt; element
	 *  @since 2.0
	 */
	public void setOtherId( OtherIdType type, String value ) {
		removeChild( ReportingDTD.STUDENTLOCATOR_OTHERID);
		addChild( ReportingDTD.STUDENTLOCATOR_OTHERID, new OtherId( type, value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;OtherId&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Additional student identifier not represented elsewhere in StudentLocator (e.g. the driver's license number of the student)."</i><p>
	 *
	 *  @return An <code>OtherId</code> object
	 *  @since 2.0
	 */
	public OtherId getOtherId() { 
		return (OtherId)getChild( ReportingDTD.STUDENTLOCATOR_OTHERID);
	}

	/**
	 *  Removes the <code>OtherId</code> child element previously created by calling <code>setOtherId</code>
	 *
	 *  @since 2.0
	 */
	public void removeOtherId() { 
		removeChild( ReportingDTD.STUDENTLOCATOR_OTHERID );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_Error&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"When IdStatus is set to Error, this element provides details about the error.  Rather than the specification
						defining a list of possible error categories and codes for StudentLocator transactions, the SIF_Category and SIF_Code elements may contain
						values defined by the application that is responding to the StudentLocator request.  It is recommended the requester convey these values
						in log files or error reports, along with the SIF_Desc and optional SIF_ExtendedDesc elements."</i><p>
	 *
	 *  @param value A <code>SIF_Error</code> object
	 *  @since 2.0
	 */
	public void setSIF_Error( SIF_Error value ) { 
		removeChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR );
		addChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR, value);
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_Error&gt;</code> child element.
	 *  This form of <code>setSIF_Error</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setSIF_Error</code>
	 *  that accepts a single <code>SIF_Error</code> object.
	 *
	 *  @param sifCategory 
	 *  @param sifCode See Error Codes.
	 *  @param sifDesc A simple, easy to understand, description of the error. The primary consumer of this message is the application user. Example: "Unable to open database."
	 *  @since 2.0
	 */
	public void setSIF_Error( Integer sifCategory, Integer sifCode, String sifDesc ) {
		removeChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR);
		addChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR, new SIF_Error( sifCategory, sifCode, sifDesc ) );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_Error&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"When IdStatus is set to Error, this element provides details about the error.  Rather than the specification
						defining a list of possible error categories and codes for StudentLocator transactions, the SIF_Category and SIF_Code elements may contain
						values defined by the application that is responding to the StudentLocator request.  It is recommended the requester convey these values
						in log files or error reports, along with the SIF_Desc and optional SIF_ExtendedDesc elements."</i><p>
	 *
	 *  @return A <code>SIF_Error</code> object
	 *  @since 2.0
	 */
	public SIF_Error getSIF_Error() { 
		return (SIF_Error)getChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR);
	}

	/**
	 *  Removes the <code>SIF_Error</code> child element previously created by calling <code>setSIF_Error</code>
	 *
	 *  @since 2.0
	 */
	public void removeSIF_Error() { 
		removeChild( ReportingDTD.STUDENTLOCATOR_SIF_ERROR );
	}

}
