// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.reporting;

import openadk.library.*;
import openadk.library.common.*;
import openadk.library.infra.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  This object provides a way to define a report within a SIF zone. It contains metadata about the report. This object represents a mutual agreement between senders and receivers of the report.  SIF_Events are reported.<p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class ReportManifest extends SIFDataObject
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public ReportManifest() {
		super( ADK.getSIFVersion(), ReportingDTD.REPORTMANIFEST );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param refId The unique identifier for this report manifest.
	 *  @param sifVersion Specifies which SIF Specification version should be used when returning the report data; wildcards are allowed.  When a wildcard is specified,
						the responding agent SHOULD attempt to return the report data in the version specified by SIF_Message/@Version,
						if that version matches the wildcard version.  If not, the responding agent can return the data in any version it chooses that matches the wildcard version.
	 *  @param sifMaxBufferSize Specifies the maximum size of a packet to be returned to the report authority.
	 *  @param reportName The authority's accepted name for the report.
	 *  @param reportDefinitionSource Indicates where the report definition can be found. 
							If Type is Embedded or Base64Binary, this element's value contains the report definition.  If Type is
							URL, this element's value is the location of the external definition.  A Type value of SIF_Query
							indicates that the SIF_QueryGroup element contains the definition.
	 */
	public ReportManifest( String refId, String sifVersion, Integer sifMaxBufferSize, String reportName, ReportDefinitionSource reportDefinitionSource ) {
		super( ADK.getSIFVersion(), ReportingDTD.REPORTMANIFEST );
		this.setRefId(refId);
		this.setSIF_Version(sifVersion);
		this.setSIF_MaxBufferSize(sifMaxBufferSize);
		this.setReportName(reportName);
		this.setReportDefinitionSource(reportDefinitionSource);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( ReportingDTD.REPORTMANIFEST_REFID );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { ReportingDTD.REPORTMANIFEST_REFID };
	}

	/**
	 *  Gets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The unique identifier for this report manifest."</i><p>
	 *
	 *  @return The <code>RefId</code> attribute of this object.
	 *  @since 1.5r1
	 */
	public String getRefId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.REPORTMANIFEST_REFID );
	}

	/**
	 *  Sets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The unique identifier for this report manifest."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setRefId( String value ) { 
		setFieldValue( ReportingDTD.REPORTMANIFEST_REFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>ReportAuthorityInfoRefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"ID (GUID) of the authority providing this manifest."</i><p>
	 *
	 *  @return The <code>ReportAuthorityInfoRefId</code> attribute of this object.
	 *  @since 1.5r1
	 */
	public String getReportAuthorityInfoRefId() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.REPORTMANIFEST_REPORTAUTHORITYINFOREFID );
	}

	/**
	 *  Sets the value of the <code>ReportAuthorityInfoRefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"ID (GUID) of the authority providing this manifest."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setReportAuthorityInfoRefId( String value ) { 
		setFieldValue( ReportingDTD.REPORTMANIFEST_REPORTAUTHORITYINFOREFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_Version&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Specifies which SIF Specification version should be used when returning the report data; wildcards are allowed.  When a wildcard is specified,
						the responding agent SHOULD attempt to return the report data in the version specified by SIF_Message/@Version,
						if that version matches the wildcard version.  If not, the responding agent can return the data in any version it chooses that matches the wildcard version."</i><p>
	 *
	 *  @return The <code>SIF_Version</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getSIF_Version() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.REPORTMANIFEST_SIF_VERSION );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_Version&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Specifies which SIF Specification version should be used when returning the report data; wildcards are allowed.  When a wildcard is specified,
						the responding agent SHOULD attempt to return the report data in the version specified by SIF_Message/@Version,
						if that version matches the wildcard version.  If not, the responding agent can return the data in any version it chooses that matches the wildcard version."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setSIF_Version( String value ) { 
		setFieldValue( ReportingDTD.REPORTMANIFEST_SIF_VERSION, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_MaxBufferSize&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Specifies the maximum size of a packet to be returned to the report authority."</i><p>
	 *
	 *  @return The <code>SIF_MaxBufferSize</code> element of this object.
	 *  @since 1.5r1
	 */
	public Integer getSIF_MaxBufferSize() { 
		return (Integer) getSIFSimpleFieldValue( ReportingDTD.REPORTMANIFEST_SIF_MAXBUFFERSIZE );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_MaxBufferSize&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Specifies the maximum size of a packet to be returned to the report authority."</i><p>
	 *
	 *  @param value A <code>Integer</code> object
	 *  @since 1.5r1
	 */
	public void setSIF_MaxBufferSize( Integer value ) { 
		setFieldValue( ReportingDTD.REPORTMANIFEST_SIF_MAXBUFFERSIZE, new SIFInt( value ), value );
	}

	/**
	 *  Sets the value of the <code>&lt;ReceivingAuthority&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The authority for whom the report is intended, usually the same authority that defines this manifest."</i><p>
	 *
	 *  @param value A <code>ReceivingAuthority</code> object
	 *  @since 1.5r1
	 */
	public void setReceivingAuthority( ReceivingAuthority value ) { 
		removeChild( ReportingDTD.REPORTMANIFEST_RECEIVINGAUTHORITY );
		addChild( ReportingDTD.REPORTMANIFEST_RECEIVINGAUTHORITY, value);
	}

	/**
	 *  Sets the value of the <code>&lt;ReceivingAuthority&gt;</code> child element.
	 *  This form of <code>setReceivingAuthority</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setReceivingAuthority</code>
	 *  that accepts a single <code>ReceivingAuthority</code> object.
	 *
	 *  @param sifRefObject The name of the object referenced.
	 *  @param value Gets or sets the content value of the &lt;ReceivingAuthority&gt; element
	 *  @since 1.5r1
	 */
	public void setReceivingAuthority( String sifRefObject, String value ) {
		removeChild( ReportingDTD.REPORTMANIFEST_RECEIVINGAUTHORITY);
		addChild( ReportingDTD.REPORTMANIFEST_RECEIVINGAUTHORITY, new ReceivingAuthority( sifRefObject, value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;ReceivingAuthority&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The authority for whom the report is intended, usually the same authority that defines this manifest."</i><p>
	 *
	 *  @return A <code>ReceivingAuthority</code> object
	 *  @since 1.5r1
	 */
	public ReceivingAuthority getReceivingAuthority() { 
		return (ReceivingAuthority)getChild( ReportingDTD.REPORTMANIFEST_RECEIVINGAUTHORITY);
	}

	/**
	 *  Removes the <code>ReceivingAuthority</code> child element previously created by calling <code>setReceivingAuthority</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeReceivingAuthority() { 
		removeChild( ReportingDTD.REPORTMANIFEST_RECEIVINGAUTHORITY );
	}

	/**
	 *  Gets the value of the <code>&lt;ReportName&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The authority's accepted name for the report."</i><p>
	 *
	 *  @return The <code>ReportName</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getReportName() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.REPORTMANIFEST_REPORTNAME );
	}

	/**
	 *  Sets the value of the <code>&lt;ReportName&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The authority's accepted name for the report."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setReportName( String value ) { 
		setFieldValue( ReportingDTD.REPORTMANIFEST_REPORTNAME, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;Description&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The description for the report."</i><p>
	 *
	 *  @return The <code>Description</code> element of this object.
	 *  @since 1.5r1
	 */
	public String getDescription() { 
		return (String) getSIFSimpleFieldValue( ReportingDTD.REPORTMANIFEST_DESCRIPTION );
	}

	/**
	 *  Sets the value of the <code>&lt;Description&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The description for the report."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 1.5r1
	 */
	public void setDescription( String value ) { 
		setFieldValue( ReportingDTD.REPORTMANIFEST_DESCRIPTION, new SIFString( value ), value );
	}

	/**
	 *  Sets the value of the <code>&lt;ReportingPeriod&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Information on the period of time over which the report spans."</i><p>
	 *
	 *  @param value A <code>ReportingPeriod</code> object
	 *  @since 1.5r1
	 */
	public void setReportingPeriod( ReportingPeriod value ) { 
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTINGPERIOD );
		addChild( ReportingDTD.REPORTMANIFEST_REPORTINGPERIOD, value);
	}

	/**
	 *  Gets the value of the <code>&lt;ReportingPeriod&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Information on the period of time over which the report spans."</i><p>
	 *
	 *  @return A <code>ReportingPeriod</code> object
	 *  @since 1.5r1
	 */
	public ReportingPeriod getReportingPeriod() { 
		return (ReportingPeriod)getChild( ReportingDTD.REPORTMANIFEST_REPORTINGPERIOD);
	}

	/**
	 *  Removes the <code>ReportingPeriod</code> child element previously created by calling <code>setReportingPeriod</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeReportingPeriod() { 
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTINGPERIOD );
	}

	/**
	 *  Sets the value of the <code>&lt;ReportDefinitionSource&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Indicates where the report definition can be found. 
							If Type is Embedded or Base64Binary, this element's value contains the report definition.  If Type is
							URL, this element's value is the location of the external definition.  A Type value of SIF_Query
							indicates that the SIF_QueryGroup element contains the definition."</i><p>
	 *
	 *  @param value A <code>ReportDefinitionSource</code> object
	 *  @since 1.5r1
	 */
	public void setReportDefinitionSource( ReportDefinitionSource value ) { 
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTDEFINITIONSOURCE );
		addChild( ReportingDTD.REPORTMANIFEST_REPORTDEFINITIONSOURCE, value);
	}

	/**
	 *  Sets the value of the <code>&lt;ReportDefinitionSource&gt;</code> child element.
	 *  This form of <code>setReportDefinitionSource</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setReportDefinitionSource</code>
	 *  that accepts a single <code>ReportDefinitionSource</code> object.
	 *
	 *  @param type This attribute indicates the source of the report definition.
	 *  @param value Gets or sets the content value of the &lt;ReportDefinitionSource&gt; element
	 *  @since 1.5r1
	 */
	public void setReportDefinitionSource( ReportDefinitionSourceType type, String value ) {
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTDEFINITIONSOURCE);
		addChild( ReportingDTD.REPORTMANIFEST_REPORTDEFINITIONSOURCE, new ReportDefinitionSource( type, value ) );
	}

	/**
	 *  Gets the value of the <code>&lt;ReportDefinitionSource&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Indicates where the report definition can be found. 
							If Type is Embedded or Base64Binary, this element's value contains the report definition.  If Type is
							URL, this element's value is the location of the external definition.  A Type value of SIF_Query
							indicates that the SIF_QueryGroup element contains the definition."</i><p>
	 *
	 *  @return A <code>ReportDefinitionSource</code> object
	 *  @since 1.5r1
	 */
	public ReportDefinitionSource getReportDefinitionSource() { 
		return (ReportDefinitionSource)getChild( ReportingDTD.REPORTMANIFEST_REPORTDEFINITIONSOURCE);
	}

	/**
	 *  Removes the <code>ReportDefinitionSource</code> child element previously created by calling <code>setReportDefinitionSource</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeReportDefinitionSource() { 
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTDEFINITIONSOURCE );
	}

	/**
	 *  Sets the value of the <code>&lt;ReportFormatList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"References a third-party format that describes the visual representation of the report data."</i><p>
	 *
	 *  @param value A <code>ReportFormatList</code> object
	 *  @since 1.5r1
	 */
	public void setReportFormatList( ReportFormatList value ) { 
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTFORMATLIST );
		addChild( ReportingDTD.REPORTMANIFEST_REPORTFORMATLIST, value);
	}

	/**
	 *  Gets the value of the <code>&lt;ReportFormatList&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"References a third-party format that describes the visual representation of the report data."</i><p>
	 *
	 *  @return A <code>ReportFormatList</code> object
	 *  @since 1.5r1
	 */
	public ReportFormatList getReportFormatList() { 
		return (ReportFormatList)getChild( ReportingDTD.REPORTMANIFEST_REPORTFORMATLIST);
	}

	/**
	 *  Removes the <code>ReportFormatList</code> child element previously created by calling <code>setReportFormatList</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeReportFormatList() { 
		removeChild( ReportingDTD.REPORTMANIFEST_REPORTFORMATLIST );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_QueryGroup&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Parent element containing the querying criteria for extracting the report information.  SIF_QueryGroup subelements are the same as the SIF_Query subelement of the SIF_Request object, except that the set of valid SIF_Operator values for this object is an expanded set."</i><p>
	 *
	 *  @param value A <code>SIF_QueryGroup</code> object
	 *  @since 1.5r1
	 */
	public void setSIF_QueryGroup( SIF_QueryGroup value ) { 
		removeChild( ReportingDTD.REPORTMANIFEST_SIF_QUERYGROUP );
		addChild( ReportingDTD.REPORTMANIFEST_SIF_QUERYGROUP, value);
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_QueryGroup&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Parent element containing the querying criteria for extracting the report information.  SIF_QueryGroup subelements are the same as the SIF_Query subelement of the SIF_Request object, except that the set of valid SIF_Operator values for this object is an expanded set."</i><p>
	 *
	 *  @return A <code>SIF_QueryGroup</code> object
	 *  @since 1.5r1
	 */
	public SIF_QueryGroup getSIF_QueryGroup() { 
		return (SIF_QueryGroup)getChild( ReportingDTD.REPORTMANIFEST_SIF_QUERYGROUP);
	}

	/**
	 *  Removes the <code>SIF_QueryGroup</code> child element previously created by calling <code>setSIF_QueryGroup</code>
	 *
	 *  @since 1.5r1
	 */
	public void removeSIF_QueryGroup() { 
		removeChild( ReportingDTD.REPORTMANIFEST_SIF_QUERYGROUP );
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_ExtendedQuery&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Query criteria for extracting the report information if ReportDefinitionSource/@Type
							is SIF_ExtendedQuery."</i><p>
	 *
	 *  @param value A <code>SIF_ExtendedQuery</code> object
	 *  @since 2.0
	 */
	public void setSIF_ExtendedQuery( SIF_ExtendedQuery value ) { 
		removeChild( ReportingDTD.REPORTMANIFEST_SIF_EXTENDEDQUERY );
		addChild( ReportingDTD.REPORTMANIFEST_SIF_EXTENDEDQUERY, value);
	}

	/**
	 *  Sets the value of the <code>&lt;SIF_ExtendedQuery&gt;</code> child element.
	 *  This form of <code>setSIF_ExtendedQuery</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setSIF_ExtendedQuery</code>
	 *  that accepts a single <code>SIF_ExtendedQuery</code> object.
	 *
	 *  @param sifSelect 
	 *  @param sifFrom 
	 *  @since 2.0
	 */
	public void setSIF_ExtendedQuery( SIF_Select sifSelect, SIF_From sifFrom ) {
		removeChild( ReportingDTD.REPORTMANIFEST_SIF_EXTENDEDQUERY);
		addChild( ReportingDTD.REPORTMANIFEST_SIF_EXTENDEDQUERY, new SIF_ExtendedQuery( sifSelect, sifFrom ) );
	}

	/**
	 *  Gets the value of the <code>&lt;SIF_ExtendedQuery&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"Query criteria for extracting the report information if ReportDefinitionSource/@Type
							is SIF_ExtendedQuery."</i><p>
	 *
	 *  @return A <code>SIF_ExtendedQuery</code> object
	 *  @since 2.0
	 */
	public SIF_ExtendedQuery getSIF_ExtendedQuery() { 
		return (SIF_ExtendedQuery)getChild( ReportingDTD.REPORTMANIFEST_SIF_EXTENDEDQUERY);
	}

	/**
	 *  Removes the <code>SIF_ExtendedQuery</code> child element previously created by calling <code>setSIF_ExtendedQuery</code>
	 *
	 *  @since 2.0
	 */
	public void removeSIF_ExtendedQuery() { 
		removeChild( ReportingDTD.REPORTMANIFEST_SIF_EXTENDEDQUERY );
	}

}
