// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.gradebook;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class MarkValueInfo extends SIFDataObject
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public MarkValueInfo() {
		super( ADK.getSIFVersion(), GradebookDTD.MARKVALUEINFO );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param refId The ID (GUID) that uniquely identifies this MarkValueInfo entity.
	 *  @param schoolInfoRefId The ID (GUID) that uniquely identifies the School that these Mark Values apply to.
	 */
	public MarkValueInfo( String refId, String schoolInfoRefId ) {
		super( ADK.getSIFVersion(), GradebookDTD.MARKVALUEINFO );
		this.setRefId(refId);
		this.setSchoolInfoRefId(schoolInfoRefId);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( GradebookDTD.MARKVALUEINFO_REFID );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { GradebookDTD.MARKVALUEINFO_REFID };
	}

	/**
	 *  Gets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The ID (GUID) that uniquely identifies this MarkValueInfo entity."</i><p>
	 *
	 *  @return The <code>RefId</code> attribute of this object.
	 *  @since 2.0
	 */
	public String getRefId() { 
		return (String) getSIFSimpleFieldValue( GradebookDTD.MARKVALUEINFO_REFID );
	}

	/**
	 *  Sets the value of the <code>RefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The ID (GUID) that uniquely identifies this MarkValueInfo entity."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setRefId( String value ) { 
		setFieldValue( GradebookDTD.MARKVALUEINFO_REFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>SchoolInfoRefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The ID (GUID) that uniquely identifies the School that these Mark Values apply to."</i><p>
	 *
	 *  @return The <code>SchoolInfoRefId</code> attribute of this object.
	 *  @since 2.0
	 */
	public String getSchoolInfoRefId() { 
		return (String) getSIFSimpleFieldValue( GradebookDTD.MARKVALUEINFO_SCHOOLINFOREFID );
	}

	/**
	 *  Sets the value of the <code>SchoolInfoRefId</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"The ID (GUID) that uniquely identifies the School that these Mark Values apply to."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setSchoolInfoRefId( String value ) { 
		setFieldValue( GradebookDTD.MARKVALUEINFO_SCHOOLINFOREFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;SchoolYear&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The year that this  MarkValueInfo applies to."</i><p>
	 *
	 *  @return The <code>SchoolYear</code> element of this object.
	 *  @since 2.0
	 */
	public Integer getSchoolYear() { 
		return (Integer) getSIFSimpleFieldValue( GradebookDTD.MARKVALUEINFO_SCHOOLYEAR );
	}

	/**
	 *  Sets the value of the <code>&lt;SchoolYear&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The year that this  MarkValueInfo applies to."</i><p>
	 *
	 *  @param value A <code>Integer</code> object
	 *  @since 2.0
	 */
	public void setSchoolYear( Integer value ) { 
		setFieldValue( GradebookDTD.MARKVALUEINFO_SCHOOLYEAR, new SIFInt( value ), value );
	}

	/**
	 *  Gets the value of the <code>&lt;Name&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The text name of the value list ("Letter Grades", "Letter Grades (+/-)", "ESU", "Pass/Fail", "Override Grades", "Citizenship Comment Codes", etc.)."</i><p>
	 *
	 *  @return The <code>Name</code> element of this object.
	 *  @since 2.0
	 */
	public String getName() { 
		return (String) getSIFSimpleFieldValue( GradebookDTD.MARKVALUEINFO_NAME );
	}

	/**
	 *  Sets the value of the <code>&lt;Name&gt;</code> element.
	* <p> The SIF specification defines the meaning of this element as: 
	* <i>"The text name of the value list ("Letter Grades", "Letter Grades (+/-)", "ESU", "Pass/Fail", "Override Grades", "Citizenship Comment Codes", etc.)."</i><p>
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setName( String value ) { 
		setFieldValue( GradebookDTD.MARKVALUEINFO_NAME, new SIFString( value ), value );
	}

	/**
	 *  Sets the value of the <code>&lt;Percentage&gt;</code> element.
	 *
	 *  @param value A <code>Percentage</code> object
	 *  @since 2.0
	 */
	public void setPercentage( Percentage value ) { 
		removeChild( GradebookDTD.MARKVALUEINFO_PERCENTAGE );
		addChild( GradebookDTD.MARKVALUEINFO_PERCENTAGE, value);
	}

	/**
	 *  Gets the value of the <code>&lt;Percentage&gt;</code> element.
	 *
	 *  @return A <code>Percentage</code> object
	 *  @since 2.0
	 */
	public Percentage getPercentage() { 
		return (Percentage)getChild( GradebookDTD.MARKVALUEINFO_PERCENTAGE);
	}

	/**
	 *  Removes the <code>Percentage</code> child element previously created by calling <code>setPercentage</code>
	 *
	 *  @since 2.0
	 */
	public void removePercentage() { 
		removeChild( GradebookDTD.MARKVALUEINFO_PERCENTAGE );
	}

	/**
	 *  Sets the value of the <code>&lt;Numeric&gt;</code> element.
	 *
	 *  @param value A <code>Numeric</code> object
	 *  @since 2.0
	 */
	public void setNumeric( Numeric value ) { 
		removeChild( GradebookDTD.MARKVALUEINFO_NUMERIC );
		addChild( GradebookDTD.MARKVALUEINFO_NUMERIC, value);
	}

	/**
	 *  Gets the value of the <code>&lt;Numeric&gt;</code> element.
	 *
	 *  @return A <code>Numeric</code> object
	 *  @since 2.0
	 */
	public Numeric getNumeric() { 
		return (Numeric)getChild( GradebookDTD.MARKVALUEINFO_NUMERIC);
	}

	/**
	 *  Removes the <code>Numeric</code> child element previously created by calling <code>setNumeric</code>
	 *
	 *  @since 2.0
	 */
	public void removeNumeric() { 
		removeChild( GradebookDTD.MARKVALUEINFO_NUMERIC );
	}

	/**
	 *  Sets the value of the <code>&lt;Letter&gt;</code> element.
	 *
	 *  @param value A <code>Letter</code> object
	 *  @since 2.0
	 */
	public void setLetter( Letter value ) { 
		removeChild( GradebookDTD.MARKVALUEINFO_LETTER );
		addChild( GradebookDTD.MARKVALUEINFO_LETTER, value);
	}

	/**
	 *  Sets the value of the <code>&lt;Letter&gt;</code> child element.
	 *  This form of <code>setLetter</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setLetter</code>
	 *  that accepts a single <code>Letter</code> object.
	 *
	 *  @param isAccepted Indicates whether a letter Mark is accepted and is used in Change events to unambiguously signal whether support for the Mark has changed, especially ended.
	 *  @since 2.0
	 */
	public void setLetter( Boolean isAccepted ) {
		removeChild( GradebookDTD.MARKVALUEINFO_LETTER);
		addChild( GradebookDTD.MARKVALUEINFO_LETTER, new Letter( isAccepted ) );
	}

	/**
	 *  Gets the value of the <code>&lt;Letter&gt;</code> element.
	 *
	 *  @return A <code>Letter</code> object
	 *  @since 2.0
	 */
	public Letter getLetter() { 
		return (Letter)getChild( GradebookDTD.MARKVALUEINFO_LETTER);
	}

	/**
	 *  Removes the <code>Letter</code> child element previously created by calling <code>setLetter</code>
	 *
	 *  @since 2.0
	 */
	public void removeLetter() { 
		removeChild( GradebookDTD.MARKVALUEINFO_LETTER );
	}

	/**
	 *  Sets the value of the <code>&lt;Narrative&gt;</code> element.
	 *
	 *  @param value A <code>Narrative</code> object
	 *  @since 2.0
	 */
	public void setNarrative( Narrative value ) { 
		removeChild( GradebookDTD.MARKVALUEINFO_NARRATIVE );
		addChild( GradebookDTD.MARKVALUEINFO_NARRATIVE, value);
	}

	/**
	 *  Gets the value of the <code>&lt;Narrative&gt;</code> element.
	 *
	 *  @return A <code>Narrative</code> object
	 *  @since 2.0
	 */
	public Narrative getNarrative() { 
		return (Narrative)getChild( GradebookDTD.MARKVALUEINFO_NARRATIVE);
	}

	/**
	 *  Removes the <code>Narrative</code> child element previously created by calling <code>setNarrative</code>
	 *
	 *  @since 2.0
	 */
	public void removeNarrative() { 
		removeChild( GradebookDTD.MARKVALUEINFO_NARRATIVE );
	}

}
