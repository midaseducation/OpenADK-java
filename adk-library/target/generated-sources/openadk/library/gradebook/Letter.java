// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.gradebook;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class Letter extends SIFList<ValidMark>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public Letter() {
		super( GradebookDTD.LETTER );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param isAccepted Indicates whether a letter Mark is accepted and is used in Change events to unambiguously signal whether support for the Mark has changed, especially ended.
	 */
	public Letter( Boolean isAccepted ) {
		super( GradebookDTD.LETTER );
		this.setIsAccepted(isAccepted);
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( GradebookDTD.LETTER_ISACCEPTED );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { GradebookDTD.LETTER_ISACCEPTED };
	}

	/**
	 *  Gets the value of the <code>IsAccepted</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Indicates whether a letter Mark is accepted and is used in Change events to unambiguously signal whether support for the Mark has changed, especially ended."</i><p>
	 *
	 *  @return The <code>IsAccepted</code> attribute of this object.
	 *  @since 2.0
	 */
	public Boolean getIsAccepted() { 
		return (Boolean) getSIFSimpleFieldValue( GradebookDTD.LETTER_ISACCEPTED );
	}

	/**
	 *  Sets the value of the <code>IsAccepted</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"Indicates whether a letter Mark is accepted and is used in Change events to unambiguously signal whether support for the Mark has changed, especially ended."</i><p>
	 *
	 *  @param value A <code>Boolean</code> object
	 *  @since 2.0
	 */
	public void setIsAccepted( Boolean value ) { 
		setFieldValue( GradebookDTD.LETTER_ISACCEPTED, new SIFBoolean( value ), value );
	}

	/**
	 *  Adds a new <code>&lt;ValidMark&gt;</code> child element.
	 *
	 *  @param value A <code>ValidMark</code> object
	 *  @since 2.0
	 */
	public void addValidMark( ValidMark value ) { 
		addChild( GradebookDTD.LETTER_VALIDMARK, value);
	}

	/**
	 *  Adds a new <code>&lt;ValidMark&gt;</code> repeatable element.
	 *  This form of <code>setValidMark</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setValidMark</code>
	 *  that accepts a single <code>ValidMark</code> object.
	 *
	 *  @param code String representing the actual Mark that would appear on the report card (e.g., "A+", "I", "100").
	 *  @since 2.0
	 */
	public void addValidMark( String code ) {
		addChild( GradebookDTD.LETTER_VALIDMARK, new ValidMark( code ) );
	}

	/**
	 *  Removes a <code>ValidMark</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param code Identifies the ValidMark object to remove by its Code value
	 *  @since 2.0
	 */
	public void removeValidMark( String code ) { 
		removeChild( GradebookDTD.LETTER_VALIDMARK, new String[] { code.toString() } );
	}

	/**
	 *  Gets a <code>ValidMark</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param code Identifies the ValidMark object to return by its "Code" attribute value
	 *  @return A <code>ValidMark</code> object
	 *  @since 2.0
	 */
	public ValidMark getValidMark( String code ) { 
		return (ValidMark)getChild( GradebookDTD.LETTER_VALIDMARK, new String[] { code.toString() } );
	}

	/**
	 *  Gets all <code>ValidMark</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>ValidMark</code> objects
	 *  @since 2.0
	 */
	public ValidMark[] getValidMarks() {
		List<SIFElement> v = getChildList( GradebookDTD.LETTER_VALIDMARK);
		ValidMark[] cvt = new ValidMark[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>ValidMark</code> objects. All existing 
	 * <code>ValidMark</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>ValidMarks</code>.
	 *
	 *  @since 2.0
	 */
	public void setValidMarks( ValidMark[] validmarks ) {
		setChildren( GradebookDTD.LETTER_VALIDMARK, validmarks );
	}

}
