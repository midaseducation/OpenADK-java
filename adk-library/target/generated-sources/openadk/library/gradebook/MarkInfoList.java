// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.gradebook;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class MarkInfoList extends SIFActionList<MarkInfoRefId>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public MarkInfoList() {
		super( GradebookDTD.MARKINFOLIST );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param termInfoRefId 
	 *  @param markInfoRefId 
	 */
	public MarkInfoList( String termInfoRefId, MarkInfoRefId markInfoRefId ) {
		super( GradebookDTD.MARKINFOLIST );
		this.setTermInfoRefId(termInfoRefId);
		this.safeAddChild( GradebookDTD.MARKINFOLIST_MARKINFOREFID, markInfoRefId );
	}

	/**
	 *  Gets the key of this object
	 *  @return The value of the object's Mandatory or Required attribute. If
	 *      an object has more than one such attribute, the key is a period-
	 *      delimited concatenation of the attribute values in sequential order
	 */
	public String getKey() {
		return getFieldValue( GradebookDTD.MARKINFOLIST_TERMINFOREFID );
	}

	/**
	 *  Gets the metadata fields that make up the key of this object
	 *  @return an array of metadata fields that make up the object's key
	 */
	public ElementDef[] getKeyFields() {
		return new ElementDef[] { GradebookDTD.MARKINFOLIST_TERMINFOREFID };
	}

	/**
	 *  Gets the value of the <code>TermInfoRefId</code> attribute.
	 *
	 *  @return The <code>TermInfoRefId</code> attribute of this object.
	 *  @since 2.0
	 */
	public String getTermInfoRefId() { 
		return (String) getSIFSimpleFieldValue( GradebookDTD.MARKINFOLIST_TERMINFOREFID );
	}

	/**
	 *  Sets the value of the <code>TermInfoRefId</code> attribute.
	 *
	 *  @param value A <code>String</code> object
	 *  @since 2.0
	 */
	public void setTermInfoRefId( String value ) { 
		setFieldValue( GradebookDTD.MARKINFOLIST_TERMINFOREFID, new SIFString( value ), value );
	}

	/**
	 *  Gets the value of the <code>SIF_Action</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"In a Change event, this flag can be used to indicate an element has been deleted from the parent list container. At a minimum the key for the list must also be present."</i><p>
	 *
	 *  @return The <code>SIF_Action</code> attribute of this object.
	 *  @since 2.0
	 */
	public String getSIF_Action() { 
		return getFieldValue( GradebookDTD.MARKINFOLIST_SIF_ACTION );
	}

	/**
	 *  Sets the value of the <code>SIF_Action</code> attribute.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"In a Change event, this flag can be used to indicate an element has been deleted from the parent list container. At a minimum the key for the list must also be present."</i><p>
	 *
	 *  @param value A constant defined by the <code>SIFActionType</code> class
	 *  @since 2.0
	 */
	public void setSIF_Action( SIFActionType value ) { 
		setField( GradebookDTD.MARKINFOLIST_SIF_ACTION, value );
	}

	/**
	 *  Sets the value of the <code>SIF_Action</code> attribute as a String.
	* <p> The SIF specification defines the meaning of this attribute as: 
	* <i>"In a Change event, this flag can be used to indicate an element has been deleted from the parent list container. At a minimum the key for the list must also be present."</i><p>
	 *
	 *  @param value The value as a String
	 *  @since 2.0
	 */
	public void setSIF_Action( String value ) { 
		setField( GradebookDTD.MARKINFOLIST_SIF_ACTION, value );
	}

	/**
	 *  Adds a new <code>&lt;MarkInfoRefId&gt;</code> repeatable element.
	 *  This form of <code>setMarkInfoRefId</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setMarkInfoRefId</code>
	 *  that accepts a single <code>MarkInfoRefId</code> object.
	 *
	 *  @param value Gets or sets the content value of the &lt;MarkInfoRefId&gt; element
	 *  @since 2.0
	 */
	public void addMarkInfoRefId( String value ) {
		addChild( GradebookDTD.MARKINFOLIST_MARKINFOREFID, new MarkInfoRefId( value ) );
	}

	/**
	 *  Removes a <code>MarkInfoRefId</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the MarkInfoRefId object to remove by its Value value
	 *  @since 2.0
	 */
	public void removeMarkInfoRefId( String value ) { 
		removeChild( GradebookDTD.MARKINFOLIST_MARKINFOREFID, new String[] { value.toString() } );
	}

	/**
	 *  Gets a <code>MarkInfoRefId</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param value Identifies the MarkInfoRefId object to return by its "Value" attribute value
	 *  @return A <code>MarkInfoRefId</code> object
	 *  @since 2.0
	 */
	public MarkInfoRefId getMarkInfoRefId( String value ) { 
		return (MarkInfoRefId)getChild( GradebookDTD.MARKINFOLIST_MARKINFOREFID, new String[] { value.toString() } );
	}

	/**
	 *  Gets all <code>MarkInfoRefId</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>MarkInfoRefId</code> objects
	 *  @since 2.0
	 */
	public MarkInfoRefId[] getMarkInfoRefIds() {
		List<SIFElement> v = getChildList( GradebookDTD.MARKINFOLIST_MARKINFOREFID);
		MarkInfoRefId[] cvt = new MarkInfoRefId[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>MarkInfoRefId</code> objects. All existing 
	 * <code>MarkInfoRefId</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>MarkInfoRefIds</code>.
	 *
	 *  @since 2.0
	 */
	public void setMarkInfoRefIds( MarkInfoRefId[] markinforefids ) {
		setChildren( GradebookDTD.MARKINFOLIST_MARKINFOREFID, markinforefids );
	}

}
