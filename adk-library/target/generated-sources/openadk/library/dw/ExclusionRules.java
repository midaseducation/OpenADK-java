// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.dw;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 2.0
 */
public class ExclusionRules extends SIFKeyedList<ExclusionRule>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public ExclusionRules() {
		super( DwDTD.EXCLUSIONRULES );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param exclusionRule Rule for which statistic may not be reported
	 */
	public ExclusionRules( ExclusionRule exclusionRule ) {
		super( DwDTD.EXCLUSIONRULES );
		this.safeAddChild( DwDTD.EXCLUSIONRULES_EXCLUSIONRULE, exclusionRule );
	}

	/**
	 *  Adds a new <code>&lt;ExclusionRule&gt;</code> repeatable element.
	 *  This form of <code>setExclusionRule</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setExclusionRule</code>
	 *  that accepts a single <code>ExclusionRule</code> object.
	 *
	 *  @param type Values: Sample, Size, Description
	 *  @param value Gets or sets the content value of the &lt;ExclusionRule&gt; element
	 *  @since 2.0
	 */
	public void addExclusionRule( ExclusionRuleType type, String value ) {
		addChild( DwDTD.EXCLUSIONRULES_EXCLUSIONRULE, new ExclusionRule( type, value ) );
	}

	/**
	 *  Removes an <code>ExclusionRule</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the ExclusionRule object to remove by its Type value
	 *  @since 2.0
	 */
	public void removeExclusionRule( ExclusionRuleType type ) { 
		removeChild( DwDTD.EXCLUSIONRULES_EXCLUSIONRULE, new String[] { type.toString() } );
	}

	/**
	 *  Gets an <code>ExclusionRule</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param type Identifies the ExclusionRule object to return by its "Type" attribute value
	 *  @return An <code>ExclusionRule</code> object
	 *  @since 2.0
	 */
	public ExclusionRule getExclusionRule( ExclusionRuleType type ) { 
		return (ExclusionRule)getChild( DwDTD.EXCLUSIONRULES_EXCLUSIONRULE, new String[] { type.toString() } );
	}

	/**
	 *  Gets all <code>ExclusionRule</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>ExclusionRule</code> objects
	 *  @since 2.0
	 */
	public ExclusionRule[] getExclusionRules() {
		List<SIFElement> v = getChildList( DwDTD.EXCLUSIONRULES_EXCLUSIONRULE);
		ExclusionRule[] cvt = new ExclusionRule[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>ExclusionRule</code> objects. All existing 
	 * <code>ExclusionRule</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>ExclusionRules</code>.
	 *
	 *  @since 2.0
	 */
	public void setExclusionRules( ExclusionRule[] exclusionrules ) {
		setChildren( DwDTD.EXCLUSIONRULES_EXCLUSIONRULE, exclusionrules );
	}

}
