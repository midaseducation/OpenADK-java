// THIS FILE WAS AUTO-GENERATED BY ADKGEN -- DO NOT MODIFY!

//
// Copyright (c)1998-2011 Pearson Education, Inc. or its affiliate(s).
// All rights reserved.
//

package openadk.library.trans;

import openadk.library.*;
import openadk.library.common.*;
import java.math.BigDecimal;
import java.util.*;

/**
 *  <p>
 *
 *  @author Generated by adkgen
 *  @version 2.7
 *  @since 1.5r1
 */
public class TransStudents extends SIFList<TransStudent>
{
	private static final long serialVersionUID = Element.CURRENT_SERIALIZE_VERSION;
	/**
	 *  Constructor
	 */
	public TransStudents() {
		super( TransDTD.TRANSSTUDENTS );
	}

	/**
	 *  Constructor that accepts values for all mandatory fields
	 *  @param student 
	 */
	public TransStudents( TransStudent student ) {
		super( TransDTD.TRANSSTUDENTS );
		this.safeAddChild( TransDTD.TRANSSTUDENTS_STUDENT, student );
	}

	/**
	 *  Adds a new <code>&lt;Student&gt;</code> repeatable element.
	 *  This form of <code>setStudent</code> is provided as a convenience method
	 *  that is functionally equivalent to the version of <code>setStudent</code>
	 *  that accepts a single <code>TransStudent</code> object.
	 *
	 *  @param studentPersonalRefId GUID that identifies the student that this element refers to.
	 *  @param status Boarding status of this student
	 *  @param value Gets or sets the content value of the &lt;TransStudent&gt; element
	 *  @since 1.5r1
	 */
	public void addStudent( String studentPersonalRefId, StudentBoardingStatus status, String value ) {
		addChild( TransDTD.TRANSSTUDENTS_STUDENT, new TransStudent( studentPersonalRefId, status, value ) );
	}

	/**
	 *  Removes a <code>TransStudent</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param studentPersonalRefId Identifies the TransStudent object to remove by its StudentPersonalRefId value
	 *  @param status Identifies the TransStudent object to remove by its Status value
	 *  @since 1.5r1
	 */
	public void removeStudent( String studentPersonalRefId, StudentBoardingStatus status ) { 
		removeChild( TransDTD.TRANSSTUDENTS_STUDENT, new String[] { studentPersonalRefId.toString(),status.toString() } );
	}

	/**
	 *  Gets a <code>TransStudent</code> object instance. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @param studentPersonalRefId Identifies the TransStudent object to return by its "StudentPersonalRefId" attribute value
	 *  @param status Identifies the TransStudent object to return by its "Status" attribute value
	 *  @return A <code>TransStudent</code> object
	 *  @since 1.5r1
	 */
	public TransStudent getStudent( String studentPersonalRefId, StudentBoardingStatus status ) { 
		return (TransStudent)getChild( TransDTD.TRANSSTUDENTS_STUDENT, new String[] { studentPersonalRefId.toString(),status.toString() } );
	}

	/**
	 *  Gets all <code>TransStudent</code> object instances. More than one instance can be defined for this object because it is a repeatable field element.
	 *
	 *  @return An array of <code>TransStudent</code> objects
	 *  @since 1.5r1
	 */
	public TransStudent[] getStudents() {
		List<SIFElement> v = getChildList( TransDTD.TRANSSTUDENTS_STUDENT);
		TransStudent[] cvt = new TransStudent[v.size()];
		v.toArray(cvt);
		return cvt;
	}

	/**
	 * Sets an array of <code>TransStudent</code> objects. All existing 
	 * <code>TransStudent</code> instances 
	 * are removed and replaced with this list. Calling this method with the 
	 * parameter value set to null removes all <code>TransStudents</code>.
	 *
	 *  @since 1.5r1
	 */
	public void setStudents( TransStudent[] students ) {
		setChildren( TransDTD.TRANSSTUDENTS_STUDENT, students );
	}

}
